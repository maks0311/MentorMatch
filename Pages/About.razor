@page "/about"

@implements IDisposable;

@using Dapper;
@using System.Data.SqlClient;
@using Radzen;
@using Radzen.Blazor;
@using Radzen.Blazor.Rendering;
@using Microsoft.Extensions.Configuration;
@using System.Globalization;
@using System.Reflection;
@using Blazored.SessionStorage;
@using Mentor.Data;
@using System.Diagnostics


@inject IConfiguration AppConfig
@inject ISessionStorageService SessionStorage
@inject IPermissionService PermissionService;

@inject TooltipService TooltipService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject DialogService DialogService

@if (AppState.IsNull())
{
    <p>Loading menu</p>
}
else
{
    <TopMenu AppState="@AppState" IsRendered="@IsRendered"></TopMenu>
}

<div class="content px-4">
    <div class="row" style="margin-top: 50px; display: flex; justify-content: center;">
        <RadzenImage Path="images/logo.png" Style="height: 100px; width: 450px; margin-bottom: 10px; border-radius: 20px;"></RadzenImage>
    </div>
    <div class="row" style="display: flex; justify-content: left; margin-left: 20px; margin-top: 50px">
        <div>
            <h2>Welcome to <span style="color: rgb(255,147,86)">Mentor-Match!</span></h2>
            <h4 style="max-width: 650px; text-align: justify;">MentorMatch: Your ultimate destination for connecting students and tutors! Find the perfect tutor or promote your tutoring services with ease. Register now to access tailored features, book lessons effortlessly, and match with top-rated tutors by subject and level. Achieve your educational goals with MentorMatch today!</h4>
        </div>
    </div>
</div>


@code {
    private AppState AppState { get; set; } = new AppState();
    private string msg { get; set; }
    private int TabIndex { get; set; } = 0;
    private bool IsRendered { get; set; } = false;
    string Today { get { return DateTime.Now.ToString("D", new CultureInfo("en-EN")); } }

    private string AppVersion { get; set; }

    private string NotificationPosition { get { return AppConfig.GetSection("PopUpNotifications").GetValue<string>("Position"); } }
    private int NotificationDuration { get { return AppConfig.GetSection("PopUpNotifications").GetValue<int>("Duration"); } }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        IsRendered = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeSession();

            IsRendered = true;

            StateHasChanged();
        }
    }

    private async Task InitializeSession()
    {
        try
        {
            AppVersion = Assembly.GetEntryAssembly().GetCustomAttribute<AssemblyFileVersionAttribute>().Version;

            if (await SessionStorage.ContainKeyAsync("APP_STATE"))
            {
                AppState = await SessionStorage.GetItemAsync<AppState>("APP_STATE");
            }

            await SessionStorage.SetItemAsync<AppState>("APP_STATE", AppState);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.GetType().FullName);
            Console.WriteLine(ex.Message);
        }
    }

    private void OnTabChange(int tabIndex)
    {
        AppState.SetParamAsInteger("ABOUT_TAB_INDEX", tabIndex);
        SessionStorage.SetItemAsync<AppState>("APP_STATE", AppState);
    }

    public void Dispose()
    {

    }
}

@page "/calendar"

@using System
@using System.Text
@using System.Reflection
@using Dapper;
@using System.Data.SqlClient;
@using Radzen;
@using Radzen.Blazor;
@using Microsoft.Extensions.Configuration;
@using System.Globalization;
@using Microsoft.Extensions.Logging;
@using Microsoft.Extensions.Logging.EventLog;
@using Blazored.SessionStorage;
@using Mentor.Data;

@inject IConfiguration AppConfig
@inject ISessionStorageService SessionStorage
@inject IPermissionService PermissionService;

@inject TooltipService TooltipService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject DialogService DialogService

@inject IUserService UserService
@inject ILessonService LessonService
@inject ILessonStatusService LessonStatusService
@inject IAvailabilityService AvailabilityService
@inject IRatingService RatingService
@inject ISubjectService SubjectService
@inject ILevelService LevelService
@inject ICompetenceService CompetenceService


@if (AppState.IsNull())
{
    <p>Loading menu...</p>
}
else
{
    <TopMenu AppState="@AppState" IsRendered="@IsRendered"></TopMenu>
}

@if ((AppState.UserInfo.IsNotNull()) && (AppState.UserInfo.IsAuthenticated.IsTrue()))
{
    <div class="row" style="margin-top:60px">
        <div class="col-md-12">
            <RadzenTabs RenderMode="TabRenderMode.Client" Style="height: max-content">
                <Tabs>
                    <RadzenTabsItem Text="Calendar">
                        <CalendarLegend/>
                        <RadzenScheduler @ref=@Scheduler
                                         Style="height:650px"
                                         TItem="LessonModel"
                                         Data=@LessonEnum
                                         StartProperty="DATE_START"
                                         EndProperty="DATE_STOP"
                                         TextProperty=@(UserObject.IsTutor ? "CAPTION_FOR_TUTOR" : "CAPTION_FOR_STUDENT")
                                         SelectedIndex="1"
                                         SlotRender=@OnSlotRender
                                         AppointmentSelect=@OnLessonSelect
                                         AppointmentRender=@OnLessonRender>
                            <RadzenMonthView MaxAppointmentsInSlot="1" />
                            <RadzenWeekView MinutesPerSlot="15" TimeFormat="HH:mm" />
                            <RadzenDayView MinutesPerSlot="15" TimeFormat="HH:mm" />
                        </RadzenScheduler>
                    </RadzenTabsItem>

                    <RadzenTabsItem Text="Availability" Visible="@(AppState.UserInfo.IsStudent.IsFalse())">
                        <RadzenCard Style="width:inherit; margin-bottom:10px">
                            <RadzenRow>
                                <RadzenColumn Size="8">
                                    <RadzenRadioButtonList Value=@AvMode TValue="int" Change=@(args => AvMode = args) Style="margin-top:10px">
                                        <Items>
                                            <RadzenRadioButtonListItem Text="Set Single Term" Value="1" />
                                            <RadzenRadioButtonListItem Text="Set Recuring Terms" Value="2" />
                                        </Items>
                                    </RadzenRadioButtonList>
                                </RadzenColumn>
                                <RadzenColumn Size="4" Style="text-align:end">
                                    <RadzenButton Text="Add" ButtonStyle="ButtonStyle.Secondary" Disabled="@AvailablityCreateDisabled" Style="margin-right:5px" Size="ButtonSize.Medium" Icon="add" Click="@(args => CreateDailyAvailability(AvailabilityMode.SET_AVAILABLE))"></RadzenButton>
                                    <RadzenButton Text="Remove" ButtonStyle="ButtonStyle.Danger" Disabled="@AvailablityRemoveDisabled" Size="ButtonSize.Medium" Icon="delete" Click="@(args => CreateDailyAvailability(AvailabilityMode.SET_NOT_AVAILABLE))"></RadzenButton>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenCard>

                        @* SINGLE *@
                        <RadzenCard Style="width:inherit; margin-bottom:10px" Visible="@(AvMode == 1)">
                            <RadzenRow>
                                <RadzenColumn Size="2"><RadzenLabel>Select Date</RadzenLabel></RadzenColumn>
                                <RadzenColumn Size="2"><RadzenLabel>Begining Time</RadzenLabel></RadzenColumn>
                                <RadzenColumn Size="2"><RadzenLabel>End Time</RadzenLabel></RadzenColumn>
                                <RadzenColumn Size="6"></RadzenColumn>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenColumn Size="2">
                                    <RadzenDatePicker TValue="DateTime"
                                                      @bind-Value=@Term.SelectedDay
                                                      Style="width:inherit"
                                                      DateFormat="yyyy-MM-dd" />
                                </RadzenColumn>
                                <RadzenColumn Size="2">
                                    <RadzenDropDown @bind-Value=@Term.TimeStart
                                                    TValue="TimeOnly"
                                                    AllowClear="false"
                                                    Data=@QuarterOnlyList
                                                    Style="width:inherit"
                                                    Change=@(args => OnDayDropDownChange(args, "TIME_START")) />
                                </RadzenColumn>
                                <RadzenColumn Size="2">
                                    <RadzenDropDown @bind-Value=@Term.TimeStop
                                                    TValue="TimeOnly"
                                                    AllowClear="false"
                                                    Data=@QuarterOnlyList
                                                    Style="width:inherit"
                                                    Change=@(args => OnDayDropDownChange(args, "TIME_STOP")) />
                                </RadzenColumn>
                                <RadzenColumn Size="6">
                                    <RadzenLabel Text="@("Duration (hh:mm): " + Term.Duration)" Style="margin-top:7px; margin-left:10px"></RadzenLabel>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenCard>

                        @* RECURING *@
                        <RadzenCard Style="width:inherit; margin-bottom:10px" Visible="@(AvMode == 2)">
                            <RadzenRow>
                                <RadzenColumn Size="2"><RadzenLabel>Begining Date</RadzenLabel></RadzenColumn>
                                <RadzenColumn Size="2"><RadzenLabel>End Date</RadzenLabel></RadzenColumn>
                                <RadzenColumn Size="8"></RadzenColumn>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenColumn Size="2">
                                    <RadzenDatePicker TValue="DateTime"
                                                      @bind-Value=@DailySlotList.DateStart
                                                      DateFormat="yyyy-MM-dd"
                                                      Style="width:inherit"
                                                      Change=@(args => OnDayDropDownChange(args, "DATE_RECURING_START")) />
                                </RadzenColumn>
                                <RadzenColumn Size="2">
                                    <RadzenDatePicker TValue="DateTime"
                                                      @bind-Value=@DailySlotList.DateStop
                                                      DateFormat="yyyy-MM-dd"
                                                      Style="width:inherit"
                                                      Change=@(args => OnDayDropDownChange(args, "DATE_RECURING_STOP")) />
                                </RadzenColumn>
                                <RadzenColumn Size="8">
                                    <RadzenLabel Text="@("Duration (days): " + DailySlotList.DurationDays)" Style="margin-top:7px; margin-left:10px"></RadzenLabel>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenCard>

                        <RadzenCard Style="width:inherit; margin-bottom:10px" Visible="@(AvMode == 2)">
                            <RadzenRow>
                                <RadzenColumn Size="1"></RadzenColumn>
                                <RadzenColumn Size="2"><RadzenLabel>Begining Time</RadzenLabel></RadzenColumn>
                                <RadzenColumn Size="2"><RadzenLabel>End Time</RadzenLabel></RadzenColumn>
                                <RadzenColumn Size="7"><RadzenLabel Style="margin-left:10px">Duration (hh:mm)</RadzenLabel></RadzenColumn>
                            </RadzenRow>

                            @foreach (var item in DailySlotList.Items)
                            {
                                <RadzenRow Style="width:inherit; margin-bottom:10px">
                                    <RadzenColumn Size="1">
                                        <RadzenLabel Text="@item.WeekdayName"></RadzenLabel>
                                    </RadzenColumn>
                                    <RadzenColumn Size="2">
                                        <RadzenDropDown @bind-Value=@DailySlotList.Items[item.Weekday - 1].TimeStart
                                                        TValue="TimeOnly"
                                                        AllowClear="false"
                                                        Style="width:inherit"
                                                        Data=@QuarterOnlyList
                                                        Change=@(args => OnWeekDropDownChange(args, "TIME_RECURING_START", @item.Weekday)) />
                                    </RadzenColumn>
                                    <RadzenColumn Size="2">
                                        <RadzenDropDown @bind-Value=@DailySlotList.Items[item.Weekday - 1].TimeStop
                                                        TValue="TimeOnly"
                                                        AllowClear="false"
                                                        Style="width:inherit"
                                                        Data=@QuarterOnlyList
                                                        Change=@(args => OnWeekDropDownChange(args, "TIME_RECURING_STOP", @item.Weekday)) />
                                    </RadzenColumn>
                                    <RadzenColumn Size="7">
                                        <RadzenLabel Text="@DailySlotList.Items[item.Weekday - 1].Duration" Style="margin-top:7px; margin-left:10px"></RadzenLabel>
                                    </RadzenColumn>
                                </RadzenRow>
                            }

                        </RadzenCard>
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>
        </div>
    </div>
}


@code {
    AppState AppState { get; set; } = new AppState();
    string msg { get; set; }
    string Today { get { return DateTime.Now.ToString("D", new CultureInfo("en-EN")); } }
    private bool IsRendered { get; set; } = false;
    private string AppVersion { get; set; }
    private static NLog.ILogger AppLogger = NLog.LogManager.GetCurrentClassLogger();

    RadzenScheduler<LessonModel> Scheduler;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    string NotificationPosition { get { return AppConfig.GetSection("PopUpNotifications").GetValue<string>("Position"); } }
    int NotificationDuration { get { return AppConfig.GetSection("PopUpNotifications").GetValue<int>("Duration"); } }

    private UserModel UserObject { get; set; } = new UserModel();
    private LessonModel LessonObject { get; set; } = new LessonModel();
    private DailySlotList DailySlotList = new DailySlotList();
    private TermItem Term = new TermItem();
    private int AvMode { get; set; } = 1;

    private DateTime TimeScopeStart { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 0, 0, 0);
    private DateTime TimeScopeStop { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1, 0, 0, 0).AddMonths(2);

    private bool LessonCreateEnabled { get; set; } = false;

    private bool AvailablityCreateDisabled
    {
        get
        {
            if (AvMode == 1)
            {
                // SINGLE TERM MODE
                if (Term.DurationAsTimeSpan.TotalMinutes > 0)
                    return false;
                else
                    return true;
            }
            else
            {
                // RECURING TERM MODE
                if (DailySlotList.DurationWeeklyTimeSpan.TotalMinutes > 0)
                    return false;
                else
                    return true;
            }
        }
    }

    private bool AvailablityRemoveDisabled
    {
        get
        {
            return false;
        }
    }

    private IEnumerable<TimeOnly> QuarterOnlyList = TimeHelper.GetDailyQuartersAsTimeOnly();
    private IEnumerable<LessonModel> LessonEnum;
    private IEnumerable<LessonStatusModel> LessonStatusEnum;
    private IEnumerable<RatingModel> RatingEnum;
    private IEnumerable<SubjectModel> SubjectEnum;
    private IEnumerable<LevelModel> LevelEnum;
    private IEnumerable<CompetenceModel> CompetenceEnum;
    private IEnumerable<AvailabilityModel> AvailabilityEnum;
    private IEnumerable<AvailabilityModel> AvailabilityEnumFiltered;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        AppVersion = Assembly.GetExecutingAssembly().GetCustomAttribute<AssemblyInformationalVersionAttribute>().InformationalVersion;
        IsRendered = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await InitializeSession();
                IsRendered = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private async Task InitializeSession()
    {
        try
        {
            if (await SessionStorage.ContainKeyAsync("APP_STATE"))
            {
                AppState = await SessionStorage.GetItemAsync<AppState>("APP_STATE");
                await InitializeData();
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private async Task InitializeData()
    {
        try
        {
            if (AppState.UserInfo.IsNotNull())
            {
                UserObject = await UserService.SelectAsync(AppState.UserInfo.USER_ID);
                LessonStatusEnum = await LessonStatusService.SelectAllAsync();
                RatingEnum = await RatingService.SelectAllAsync();
                SubjectEnum = await SubjectService.SelectAllAsync();
                LevelEnum = await LevelService.SelectAllAsync();
                CompetenceEnum = await CompetenceService.SelectAllByTutorAsync(AppState.UserInfo.USER_ID);
                SubjectEnum = FilterSubjectList(AppState.UserInfo.USER_ID);

                AppState.SetParam("CALENDAR_OWNER_ID", UserObject.USER_ID);
                await SessionStorage.SetItemAsync<AppState>("APP_STATE", AppState);

                LessonCreateEnabled = (SubjectEnum.Any() && (UserObject.IsStudent || UserObject.IsAdmin));

                if (UserObject.IsTutor || UserObject.IsAdmin)
                {
                    LessonEnum = await LessonService.SelectAllByTutorAsync(AppState.UserInfo.USER_ID);
                    AvailabilityEnum = await AvailabilityService.SelectAllAsync(AppState.UserInfo.USER_ID, TimeScopeStart, TimeScopeStop);
                    DailySlotList = new DailySlotList(AppState.UserInfo.USER_ID);
                }
                else if (UserObject.IsStudent)
                {
                    LessonEnum = await LessonService.SelectAllByStudentAsync(AppState.UserInfo.USER_ID);
                }
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private IEnumerable<LevelModel> FilterLevelList(int subjec_id, int tutor_id)
    {
        List<int> levelsOfTheSubject = CompetenceEnum.Where(x => x.TUTOR_ID == AppState.UserInfo.USER_ID && x.SUBJECT_ID == subjec_id).Select(y => y.LEVEL_ID).ToList();
        return LevelEnum.Where(x => levelsOfTheSubject.Contains(x.LEVEL_ID));
    }

    private IEnumerable<SubjectModel> FilterSubjectList(int tutor_id)
    {
        List<int> tutorSubjects = CompetenceEnum.Where(x => x.TUTOR_ID == tutor_id).Select(y => y.SUBJECT_ID).ToList();
        return SubjectEnum.Where(x => tutorSubjects.Contains(x.SUBJECT_ID));
    }

    private void OnLessonRender(SchedulerAppointmentRenderEventArgs<LessonModel> args)
    {
        switch (args.Data.LESSON_STATUS_ID)
        {
            case 1:
                args.Attributes["style"] = Globals.CalendarStyleLessonStatus1;
                break;
            case 2:
                args.Attributes["style"] = Globals.CalendarStyleLessonStatus2;
                break;
            case 4:
                args.Attributes["style"] = Globals.CalendarStyleLessonStatus4;
                break;
            case 5:
                args.Attributes["style"] = Globals.CalendarStyleLessonStatus5;
                break;
            case 6:
                args.Attributes["style"] = Globals.CalendarStyleLessonStatus6;
                break;
            case 7:
                args.Attributes["style"] = Globals.CalendarStyleLessonStatus7;
                break;
        }        
    }

    private void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        if (UserObject.IsTutor)
        {
            AvailabilityEnumFiltered = AvailabilityEnum.Where(x => x.DATE_START >= args.View.StartDate && x.DATE_STOP < args.View.EndDate);

            if (args.View.Text == "Month")
            {
                foreach (AvailabilityModel av in AvailabilityEnumFiltered)
                {
                    if (args.Start.Date == av.DATE_START.Date)
                    {
                        args.Attributes["style"] = Globals.CalendarStyleAvailability;
                    }
                }
            }

            if (args.View.Text == "Week")
            {
                foreach (AvailabilityModel av in AvailabilityEnumFiltered)
                {
                    if (args.Start.Date == av.DATE_START.Date && args.Start.TimeOfDay >= av.DATE_START.TimeOfDay && args.Start.TimeOfDay < av.DATE_STOP.TimeOfDay)
                    {
                        args.Attributes["style"] = Globals.CalendarStyleAvailability;
                    }
                }
            }

            if (args.View.Text == "Day")
            {
                foreach (AvailabilityModel av in AvailabilityEnumFiltered)
                {
                    if (args.Start.Date == av.DATE_START.Date && args.Start.TimeOfDay >= av.DATE_START.TimeOfDay && args.Start.TimeOfDay < av.DATE_STOP.TimeOfDay)
                    {
                        args.Attributes["style"] = Globals.CalendarStyleAvailability;
                    }
                }
            }
        }

        if (args.View.Text == "Month")
        {
            // Highlight today in month view
            if (args.Start.Date == DateTime.Today)
            {
                args.Attributes["style"] = Globals.CalendarStyleToday;
            }
        }
    }

    private async Task OnLessonSelect(SchedulerAppointmentSelectEventArgs<LessonModel> args)
    {
        LessonObject = await LessonService.SelectAsync(args.Data.LESSON_ID);

        await DialogService.OpenAsync<LessonEditor>(String.Format("Lesson - {0}", LessonObject.LESSON_STATUS_NAME), new Dictionary<string, object> { { "LessonObject", LessonObject } });
        if (UserObject.IsTutor)
        {
            LessonEnum = await LessonService.SelectAllByTutorAsync(AppState.UserInfo.USER_ID);
        }
        else if (UserObject.IsStudent)
        {
            LessonEnum = await LessonService.SelectAllByStudentAsync(AppState.UserInfo.USER_ID);
        }
        await Scheduler.Reload();
    }

    private void OnDayDropDownChange(object value, string key)
    {
        if ((key == "TIME_START") && (Term.TimeStart > Term.TimeStop))
        {
            Term.TimeStop = Term.TimeStart;
        }
        else if ((key == "TIME_STOP") && (Term.TimeStop < Term.TimeStart))
        {
            Term.TimeStart = Term.TimeStop;
        }

        if ((key == "DATE_RECURING_START") && (DailySlotList.DateStart > DailySlotList.DateStop))
        {
            DailySlotList.DateStop = DailySlotList.DateStart;
        }
        else if (key == "DATE_RECURING_STOP" && (DailySlotList.DateStop < DailySlotList.DateStart))
        {
            DailySlotList.DateStart = DailySlotList.DateStop;
        }

        StateHasChanged();
    }

    private void OnWeekDropDownChange(object value, string key, int weekday)
    {
        if (DailySlotList.Items.Count() > 0)
        {
            var start = DailySlotList.Items[weekday - 1].TimeStart;
            var stop = DailySlotList.Items[weekday - 1].TimeStop;

            if ((key == "TIME_RECURING_START") && (start > stop))
            {
                DailySlotList.Items[weekday - 1].TimeStop = DailySlotList.Items[weekday - 1].TimeStart;
            }
            else if ((key == "TIME_RECURING_STOP") && (stop < start))
            {
                DailySlotList.Items[weekday - 1].TimeStart = DailySlotList.Items[weekday - 1].TimeStop;
            }
            StateHasChanged();
        }
    }

    private async Task AddAvailable()
    {
        DateTime start = new DateTime(Term.SelectedDay.Year, Term.SelectedDay.Month, Term.SelectedDay.Day, Term.TimeStart.Hour, Term.TimeStart.Minute, 0);
        DateTime stop = new DateTime(Term.SelectedDay.Year, Term.SelectedDay.Month, Term.SelectedDay.Day, Term.TimeStop.Hour, Term.TimeStop.Minute, 0);
        var retval = AvailabilityService.Create(AppState.UserInfo.USER_ID, start, stop);

        if (retval.IsPositive())
        {
            LessonEnum = await LessonService.SelectAllByTutorAsync(AppState.UserInfo.USER_ID);
        }
    }

    private async Task RemoveAvailable()
    {
        DateTime start = new DateTime(Term.SelectedDay.Year, Term.SelectedDay.Month, Term.SelectedDay.Day, Term.TimeStart.Hour, Term.TimeStart.Minute, 0);
        DateTime stop = new DateTime(Term.SelectedDay.Year, Term.SelectedDay.Month, Term.SelectedDay.Day, Term.TimeStop.Hour, Term.TimeStop.Minute, 0);
        var retval = AvailabilityService.Delete(AppState.UserInfo.USER_ID, start, stop);

        if (retval.IsPositive())
        {
            LessonEnum = await LessonService.SelectAllByTutorAsync(AppState.UserInfo.USER_ID);
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Availability", Detail = "Saved", Duration = NotificationDuration, Style = NotificationPosition });
        }
        else
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Availability", Detail = "Not Saved", Duration = NotificationDuration, Style = NotificationPosition });
        }
    }


    public async Task<int> CreateDailyAvailability(AvailabilityMode mode)
    {
        int retCreate = 0;
        int retDel = 0;
        var av_new = new List<AvailabilityModel>();

        DateTime DayStart = DateTime.Now;
        DateTime DayStop = DateTime.Now;

        if (@AvMode == 1)
        {
            DayStart = Term.SelectedDay;
            DayStop = Term.SelectedDay;

            AvailabilityModel item = new AvailabilityModel()
                {
                    AVAILABILITY_ID = 0,
                    TUTOR_ID = AppState.UserInfo.USER_ID,
                    DATE_START = new DateTime(Term.SelectedDay.Year, Term.SelectedDay.Month, Term.SelectedDay.Day, Term.TimeStart.Hour, Term.TimeStart.Minute, 0),
                    DATE_STOP = new DateTime(Term.SelectedDay.Year, Term.SelectedDay.Month, Term.SelectedDay.Day, Term.TimeStop.Hour, Term.TimeStop.Minute, 0),
                    IS_SELECTED = true
                };
            av_new.Add(item);
        }
        else
        {
            DayStart = DailySlotList.DateStart;
            DayStop = DailySlotList.DateStop;

            var days = TimeHelper.EachDay(DayStart, DayStop);
            foreach (DateTime day_in_period in days)
            {
                var x = day_in_period.DayOfWeek.ToInt();
                foreach (var daily_slot in DailySlotList.Items)
                {
                    if (daily_slot.Weekday == day_in_period.DayOfWeek.ToInt())
                    {
                        AvailabilityModel av_item = new AvailabilityModel()
                            {
                                AVAILABILITY_ID = 0,
                                TUTOR_ID = AppState.UserInfo.USER_ID,
                                DATE_START = new DateTime(day_in_period.Year, day_in_period.Month, day_in_period.Day, daily_slot.TimeStart.Hour, daily_slot.TimeStart.Minute, 0),
                                DATE_STOP = new DateTime(day_in_period.Year, day_in_period.Month, day_in_period.Day, daily_slot.TimeStop.Hour, daily_slot.TimeStop.Minute, 0),
                                IS_SELECTED = true
                            };
                        av_new.Add(av_item);
                    }
                }
            }
        }

        if (!av_new.Any()) { return 0; }

        // do for each day in selected period
        foreach (DateTime day_in_period in TimeHelper.EachDay(DayStart, DayStop))
        {
            List<AvailabilityModel> av_matrix = TimeHelper.GetDailyQuartersAsAvailabilityList(AppState.UserInfo.USER_ID, day_in_period);

            var start = new DateTime(day_in_period.Year, day_in_period.Month, day_in_period.Day, 0, 0, 0);
            var stop = start.AddDays(1);
            var av_prev = await AvailabilityService.SelectAllAsync(AppState.UserInfo.USER_ID, start, stop);

            foreach (var item in av_matrix)
            {
                var exists_prev = av_prev.FirstOrDefault(x => x.DATE_START <= item.DATE_START && x.DATE_STOP >= item.DATE_STOP);
                var exists_new = av_new.FirstOrDefault(x => x.DATE_START <= item.DATE_START && x.DATE_STOP >= item.DATE_STOP);

                if (mode == Mentor.AvailabilityMode.SET_AVAILABLE)
                {
                    if (exists_prev.IsNotNull() || exists_new.IsNotNull())
                    {
                        item.IS_SELECTED = true;
                    }
                }
                else
                {
                    if ((exists_prev.IsNotNull() && exists_new.IsNull()))
                    {
                        item.IS_SELECTED = true;
                    }
                }
            }

            List<AvailabilityModel> lst = new List<AvailabilityModel>();
            bool start_found = false;
            bool stop_found = false;

            DateTime item_start = new DateTime();
            DateTime item_stop = new DateTime();

            foreach (var item in av_matrix)
            {
                if (item.IS_SELECTED.IsTrue() && start_found.IsFalse())
                {
                    item_start = item.DATE_START;
                    start_found = true;
                }

                if (item.IS_SELECTED.IsFalse() && start_found.IsTrue())
                {
                    item_stop = item.DATE_STOP.AddMinutes(-15);
                    stop_found = true;
                }

                if (start_found.IsTrue() && stop_found.IsTrue())
                {
                    AvailabilityModel av = new AvailabilityModel();
                    av.AVAILABILITY_ID = 0;
                    av.TUTOR_ID = AppState.UserInfo.USER_ID;
                    av.DATE_START = item_start;
                    av.DATE_STOP = item_stop;
                    lst.Add(av);

                    start_found = false;
                    stop_found = false;
                }
            }

            retDel = await AvailabilityService.DeleteAsync(AppState.UserInfo.USER_ID, start, stop);

            if (retDel.IsPositiveOrZero())
            {
                foreach (var item in lst)
                {
                    retCreate += await AvailabilityService.CreateAsync(AppState.UserInfo.USER_ID, item.DATE_START, item.DATE_STOP);
                }
            }

        }

        if (retCreate.IsPositive())
        {
            AvailabilityEnum = await AvailabilityService.SelectAllAsync(AppState.UserInfo.USER_ID, TimeScopeStart, TimeScopeStop);
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Availablility Saved", Detail = msg, Duration = NotificationDuration, Style = NotificationPosition });
        }

        if(retDel.IsPositive())
        {
            AvailabilityEnum = await AvailabilityService.SelectAllAsync(AppState.UserInfo.USER_ID, TimeScopeStart, TimeScopeStop);
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Availablility Deleted", Detail = msg, Duration = NotificationDuration, Style = NotificationPosition });
        }

        return retCreate + retDel;
    }

    private void ShowNotification(NotificationMessage message)
    {
        try
        {
            NotificationService.Notify(message);
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }


    private void ShowTooltip(ElementReference elementReference, string msg)
    {
        TooltipOptions options = new TooltipOptions() { Duration = NotificationDuration };
        TooltipService.Open(elementReference, msg, options);
    }

    public void Dispose()
    {
    }
}
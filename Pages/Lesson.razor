@page "/lesson"

@using System
@using System.Text
@using System.Reflection
@using Dapper;
@using System.Data.SqlClient;
@using Radzen;
@using Radzen.Blazor;
@using Radzen.Blazor.Rendering;
@using Microsoft.Extensions.Configuration;
@using System.Globalization;
@using Microsoft.Extensions.Logging;
@using Microsoft.Extensions.Logging.EventLog;
@using Blazored.SessionStorage;
@using Mentor.Data;

@inject IConfiguration AppConfig
@inject ISessionStorageService SessionStorage
@inject IPermissionService PermissionService;

@inject TooltipService TooltipService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject DialogService DialogService

@inject ILessonService LessonService;

@if (AppState.IsNull())
{
    <p>Loading lesson...</p>
}
else
{
    <TopMenu AppState="@AppState" IsRendered="@IsRendered"></TopMenu>

    @if ((AppState.UserInfo.IsNotNull()) || (AppState.LessonInfo.IsNotNull()))
    {
        <div class="row" style="margin-top:60px">
            <div class="col-md-12">
                <RadzenCard Style="margin-top:10px">
                    <RadzenStack Style="width:inherit" Orientation="Orientation.Horizontal">
                        <RadzenStack Style="width:50%">
                            <RadzenRow>
                                <RadzenColumn Size="@ColumnLabelSize"><RadzenText Text="Subject"></RadzenText></RadzenColumn>
                                <RadzenColumn Size="@ColumnControlSize"><RadzenTextBox Style="width:inherit" @bind-Value=@LessonObject.SUBJECT_NAME Disabled='true'></RadzenTextBox></RadzenColumn>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenColumn Size="@ColumnLabelSize"><RadzenText Text="Tutor"></RadzenText></RadzenColumn>
                                <RadzenColumn Size="@ColumnControlSize"><RadzenTextBox Style="width:inherit" @bind-Value=@LessonObject.TUTOR_NAME Disabled='true'></RadzenTextBox></RadzenColumn>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenColumn Size="@ColumnLabelSize"><RadzenText Text="Student"></RadzenText></RadzenColumn>
                                <RadzenColumn Size="@ColumnControlSize"><RadzenTextBox Style="width:inherit" @bind-Value=@LessonObject.STUDENT_NAME Disabled='true'></RadzenTextBox></RadzenColumn>
                            </RadzenRow>
                        </RadzenStack>
                        <RadzenStack Style="width:50%">
                            <RadzenRow>
                                <RadzenColumn Size="@ColumnLabelSize"><RadzenText Text="Starts at"></RadzenText></RadzenColumn>
                                <RadzenColumn Size="@ColumnControlSize"><RadzenDatePicker Style="width:inherit" @bind-Value=@LessonObject.DATE_START Disabled='true'></RadzenDatePicker></RadzenColumn>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenColumn Size="@ColumnLabelSize"><RadzenText Text="Until" Style="width: 78px"></RadzenText></RadzenColumn>
                                <RadzenColumn Size="@ColumnControlSize"><RadzenDatePicker Style="width:inherit" @bind-Value=@LessonObject.DATE_STOP Disabled='true'></RadzenDatePicker></RadzenColumn>
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
                <RadzenCard Style="margin-top:10px">
                    <RadzenStack Style="width:inherit" Orientation="Orientation.Horizontal">
                        <RadzenStack Style="width:50%">
                            <RadzenRow>
                                <RadzenColumn Size="@ColumnLabelSize"><RadzenText Text="Status"></RadzenText></RadzenColumn>
                                <RadzenColumn Size="@ColumnControlSize"><RadzenTextBox Style="width:inherit" @bind-Value=@LessonObject.LESSON_STATUS_NAME Disabled='true'></RadzenTextBox></RadzenColumn>
                            </RadzenRow>
                        </RadzenStack>
                        <RadzenStack Style="width:50%">
                            <RadzenRow>
                                @if (LessonObject.LESSON_STATUS_ID == 1 && AppState.UserInfo.IsTutor)
                                {
                                    <RadzenColumn Size="@ColumnLabelSize" Style="margin-left: 40px; margin-right: 40px"><RadzenButton Click=@(args => ApproveLesson()) Style="width: 170px" Text="Approve Lesson" Icon="done" ButtonStyle="ButtonStyle.Success"></RadzenButton></RadzenColumn>
                                    <RadzenColumn Size="@ColumnLabelSize" Style="margin-left: 40px; margin-right: 40px"><RadzenButton Click=@(args => CancelLesson()) Style="width: 170px" Text="Cancel Lesson" Icon="highlight_off" ButtonStyle="ButtonStyle.Danger"></RadzenButton></RadzenColumn>
                                }
                                else if (LessonObject.LESSON_STATUS_ID == 2)
                                {
                                    <RadzenColumn Size="@ColumnLabelSize" Style="margin-left: 40px; margin-right: 40px"><RadzenButton Click=@(args => CancelLesson()) Style="width: 170px" Text="Cancel Lesson" Icon="highlight_off" ButtonStyle="ButtonStyle.Danger"></RadzenButton></RadzenColumn>
                                }
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
                <RadzenCard Style="margin-top:10px">
                    <RadzenStack Style="width:inherit" Orientation="Orientation.Horizontal">
                        <RadzenStack Style="width:50%">
                            @if (LessonObject.DATE_STOP < DateTime.Today && AppState.UserInfo.IsStudent && !IsLessonRated && LessonObject.LESSON_STATUS_ID == 4)
                            {
                                <RadzenRow>
                                    <RadzenColumn Size="@ColumnLabelSize"><RadzenText Text="Rating"></RadzenText></RadzenColumn>
                                    <RadzenColumn Size="@ColumnLabelSize"><RadzenRating Style="width:inherit" @bind-Value=@RatingValue></RadzenRating></RadzenColumn>
                                    <RadzenColumn Size="@ColumnLabelSize" Style="margin-left: 40px; margin-right: 40px"><RadzenButton Click=@(args => RateLesson(RatingValue)) Style="width: 170px" Icon="done" Text="Rate Lesson" ButtonStyle="ButtonStyle.Success"></RadzenButton></RadzenColumn>
                                </RadzenRow>
                            }
                            else
                            {
                                <RadzenRow>
                                    <RadzenColumn Size="@ColumnLabelSize"><RadzenText Text="Rating"></RadzenText></RadzenColumn>
                                    <RadzenColumn Size="@ColumnControlSize" Style="width: 106px"><RadzenRating Style="width: 123px; height: 33px; display: table; visibility: visible" @bind-Value=@LessonObject.RATING_VALUE ReadOnly='true'></RadzenRating></RadzenColumn>
                                </RadzenRow>
                            }
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
            </div>
        </div>
    }
}



@code {
    AppState AppState { get; set; } = new AppState();
    string msg { get; set; }
    string Today { get { return DateTime.Now.ToString("D", new CultureInfo("en-EN")); } }
    private bool IsRendered { get; set; } = false;
    private string AppVersion { get; set; }
    private static NLog.ILogger AppLogger = NLog.LogManager.GetCurrentClassLogger();

    private int ColumnLabelSize = 2;
    private int ColumnControlSize = 10;

    string NotificationPosition { get { return AppConfig.GetSection("PopUpNotifications").GetValue<string>("Position"); } }
    int NotificationDuration { get { return AppConfig.GetSection("PopUpNotifications").GetValue<int>("Duration"); } }

    private bool IsLessonRated;
    private int RatingValue = 0;

    private LessonModel LessonObject { get; set; } = new LessonModel();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        AppVersion = Assembly.GetExecutingAssembly().GetCustomAttribute<AssemblyInformationalVersionAttribute>().InformationalVersion;
        IsRendered = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await InitializeSession();
                await InitializeData();

                IsRendered = true;

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private async Task InitializeSession()
    {
        try
        {
            if (await SessionStorage.ContainKeyAsync("APP_STATE"))
            {
                AppState = await SessionStorage.GetItemAsync<AppState>("APP_STATE");
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private async Task InitializeData()
    {
        try
        {
            if (AppState.LessonInfo.IsNotNull())
            {
                LessonObject = await LessonService.SelectAsync(AppState.LessonInfo.LESSON_ID);

                if (LessonObject.RATING_ID == 6)
                {
                    IsLessonRated = false;
                }
                else
                {
                    IsLessonRated = true;
                }
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private async Task RateLesson(int ratingValue)
    {
        try
        {
            if (ratingValue == 0)
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Lesson Not Rated", Detail = "Minimum rating is 1 star", Duration = NotificationDuration, Style = NotificationPosition });
                return;
            }
            LessonObject.RATING_ID = ratingValue;
            await LessonService.UpdateAsync(LessonObject);
            IsLessonRated = true;
            LessonObject = await LessonService.SelectAsync(AppState.LessonInfo.LESSON_ID);
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Lesson Rated", Detail = "", Duration = NotificationDuration, Style = NotificationPosition });

        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private async Task ApproveLesson()
    {
        LessonObject.LESSON_STATUS_ID = 2;
        await LessonService.UpdateAsync(LessonObject);
        LessonObject = await LessonService.SelectAsync(AppState.LessonInfo.LESSON_ID);
        ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Lesson Approved", Detail = "", Duration = NotificationDuration, Style = NotificationPosition });
    }

    private async Task CancelLesson()
    {
        LessonObject.LESSON_STATUS_ID = 3;
        await LessonService.UpdateAsync(LessonObject);
        LessonObject = await LessonService.SelectAsync(AppState.LessonInfo.LESSON_ID);
        ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Lesson Cancelled", Detail = "", Duration = NotificationDuration, Style = NotificationPosition });
    }

    private void ShowNotification(NotificationMessage message)
    {
        try
        {
            NotificationService.Notify(message);
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private void ShowTooltip(ElementReference elementReference, string msg)
    {
        TooltipOptions options = new TooltipOptions() { Duration = NotificationDuration };
        TooltipService.Open(elementReference, msg, options);
    }
}
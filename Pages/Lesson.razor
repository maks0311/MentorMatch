@page "/lesson"

@using System
@using System.Text
@using System.Reflection
@using Dapper;
@using System.Data.SqlClient;
@using Radzen;
@using Radzen.Blazor;
@using Radzen.Blazor.Rendering;
@using Microsoft.Extensions.Configuration;
@using System.Globalization;
@using Microsoft.Extensions.Logging;
@using Microsoft.Extensions.Logging.EventLog;
@using Blazored.SessionStorage;
@using Mentor.Data;

@inject IConfiguration AppConfig
@inject ISessionStorageService SessionStorage
@inject IPermissionService PermissionService;

@inject TooltipService TooltipService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject DialogService DialogService

@inject ILessonService LessonService;

<h3>Lesson</h3>

@if (AppState.IsNull())
{
    <p>Loading lesson...</p>
}
else
{
    <TopMenu AppState="@AppState" IsRendered="@IsRendered"></TopMenu>

    @if ((AppState.UserInfo.IsNotNull()) || (AppState.LessonInfo.IsNotNull()))
    {
        <div class="row" style="margin-top:60px">
            <div class="col-md-12">
                <RadzenCard Style="margin-top:10px">
                    <RadzenStack Style="width:inherit" Orientation="Orientation.Horizontal">
                        <RadzenStack Style="width:50%">
                            <RadzenRow>
                                <RadzenColumn Size="@ColumnLabelSize"><RadzenText Text="Subject"></RadzenText></RadzenColumn>
                                <RadzenColumn Size="@ColumnControlSize"><RadzenTextBox Style="width:inherit" @bind-Value=@LessonObject.SUBJECT_NAME Disabled='true'></RadzenTextBox></RadzenColumn>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenColumn Size="@ColumnLabelSize"><RadzenText Text="Lesson's status"></RadzenText></RadzenColumn>
                                <RadzenColumn Size="@ColumnControlSize"><RadzenTextBox Style="width:inherit" @bind-Value=@LessonObject.LESSON_STATUS_NAME Disabled='true'></RadzenTextBox></RadzenColumn>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenColumn Size="@ColumnLabelSize"><RadzenText Text="Tutor's name"></RadzenText></RadzenColumn>
                                <RadzenColumn Size="@ColumnControlSize"><RadzenTextBox Style="width:inherit" @bind-Value=@LessonObject.TUTOR_NAME Disabled='true'></RadzenTextBox></RadzenColumn>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenColumn Size="@ColumnLabelSize"><RadzenText Text="Student's name"></RadzenText></RadzenColumn>
                                <RadzenColumn Size="@ColumnControlSize"><RadzenTextBox Style="width:inherit" @bind-Value=@LessonObject.STUDENT_NAME Disabled='true'></RadzenTextBox></RadzenColumn>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenColumn Size="@ColumnLabelSize"><RadzenText Text="Starts at"></RadzenText></RadzenColumn>
                                <RadzenColumn Size="@ColumnControlSize"><RadzenDatePicker Style="width:inherit" @bind-Value=@LessonObject.DATE_START Disabled='true'></RadzenDatePicker></RadzenColumn>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenColumn Size="@ColumnLabelSize"><RadzenText Text="Until"></RadzenText></RadzenColumn>
                                <RadzenColumn Size="@ColumnControlSize"><RadzenDatePicker Style="width:inherit" @bind-Value=@LessonObject.DATE_STOP Disabled='true'></RadzenDatePicker></RadzenColumn>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenColumn Size="@ColumnLabelSize"><RadzenText Text="Rating"></RadzenText></RadzenColumn>
                                <RadzenColumn Size="@ColumnControlSize"><RadzenRating Style="width:inherit, font-size: 20pt" @bind-Value=@LessonObject.RATING_VALUE ReadOnly='true'></RadzenRating></RadzenColumn>
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
            </div>
        </div>
    }
}



@code {
    AppState AppState { get; set; } = new AppState();
    string msg { get; set; }
    string Today { get { return DateTime.Now.ToString("D", new CultureInfo("en-EN")); } }
    private bool IsRendered { get; set; } = false;
    private string AppVersion { get; set; }
    private static NLog.ILogger AppLogger = NLog.LogManager.GetCurrentClassLogger();

    private int ColumnLabelSize = 2;
    private int ColumnControlSize = 10;

    private LessonModel LessonObject { get; set; } = new LessonModel();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        AppVersion = Assembly.GetExecutingAssembly().GetCustomAttribute<AssemblyInformationalVersionAttribute>().InformationalVersion;
        IsRendered = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await InitializeSession();
                await InitializeData();

                IsRendered = true;

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private async Task InitializeSession()
    {
        try
        {
            if (await SessionStorage.ContainKeyAsync("APP_STATE"))
            {
                AppState = await SessionStorage.GetItemAsync<AppState>("APP_STATE");
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private async Task InitializeData()
    {
        try
        {
            if (AppState.LessonInfo.IsNotNull())
            {
                LessonObject = await LessonService.SelectAsync(AppState.LessonInfo.LESSON_ID);
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }
}


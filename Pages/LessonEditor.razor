@using System
@using System.Text
@using System.Reflection
@using Dapper;
@using System.Data.SqlClient;
@using Radzen;
@using Radzen.Blazor;
@using Microsoft.Extensions.Configuration;
@using System.Globalization;
@using Microsoft.Extensions.Logging;
@using Microsoft.Extensions.Logging.EventLog;
@using Blazored.SessionStorage;
@using Mentor.Data;

@inject IConfiguration AppConfig
@inject ISessionStorageService SessionStorage
@inject IPermissionService PermissionService;

@inject TooltipService TooltipService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject DialogService DialogService

@inject ILessonService LessonService
@inject IUserService UserService
@inject ILessonService LessonService
@inject ILessonStatusService LessonStatusService
@inject ISubjectService SubjectService
@inject ILevelService LevelService
@inject ICompetenceService CompetenceService
@inject IRatingService RatingService


@if (UserObject.IsNotNull() && LessonObject.IsNotNull())
{
    <RadzenCard Style="width:inherit">
        <RadzenRow Style="margin-bottom:5px">
            <RadzenColumn Size="7">
                <RadzenMenu Visible="@IsRendered">
                    <RadzenMenuItem Text="Save Lesson" Icon="save" Click="LessonSave" Style="padding-right:25px;" Disabled="@(!SaveEnabled)"></RadzenMenuItem>
                    <RadzenMenuItem Text="Accept Lesson" Icon="done" Click="LessonAccept" Style="padding-right:25px;" Disabled="@(!AcceptEnabled)"></RadzenMenuItem>
                    <RadzenMenuItem Text="Cancel Lesson" Icon="delete" Click="LessonDelete" Style="padding-right:25px;" Disabled="@(!DeleteEnabled)"></RadzenMenuItem>
                </RadzenMenu>
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>

    <RadzenCard Style="width:inherit; margin-top:10px">
        <RadzenRow Style="margin-bottom:5px">
            <RadzenColumn Size="6"><RadzenLabel Text="Student" /></RadzenColumn>
            <RadzenColumn Size="6"><RadzenLabel Text="Tutor" /></RadzenColumn>
        </RadzenRow>
        <RadzenRow Style="margin-bottom:5px">
            <RadzenColumn Size="6">
                @if (UserEnum.IsNotNull() && UserEnum.Any())
                {
                    <RadzenDropDownDataGrid @bind-Value="@LessonObject.STUDENT_ID"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            AllowFiltering="false"
                                            AllowClear="false"
                                            AllowSorting="false"
                                            ShowSearch="false"
                                            TextProperty="USER_FULLNAME"
                                            ValueProperty="USER_ID"
                                            Disabled=@(!UserObject.IsAdmin)
                                            Data=@UserEnum
                                            Change=@(args => OnDropDownChange(args, "STUDENT"))
                                            Style="width:inherit" />

                }
            </RadzenColumn>
            <RadzenColumn Size="6">
                @if (UserEnum.IsNotNull() && UserEnum.Any())
                {
                    <RadzenDropDownDataGrid @bind-Value="@LessonObject.TUTOR_ID"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            AllowFiltering="false"
                                            AllowClear="false"
                                            AllowSorting="false"
                                            ShowSearch="false"
                                            TextProperty="USER_FULLNAME"
                                            ValueProperty="USER_ID"
                                            Data=@UserEnum
                                            Disabled=@(!UserObject.IsAdmin)
                                            Change=@(args => OnDropDownChange(args, "TUTOR"))
                                            Style="width:inherit" />
                }
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>

    <RadzenCard Style="width:inherit; margin-top:10px">
        <RadzenRow>
            <RadzenColumn Size="6"><RadzenLabel Text="Subject" /></RadzenColumn>
            <RadzenColumn Size="6"><RadzenLabel Text="Level" /></RadzenColumn>
        </RadzenRow>
        <RadzenRow Style="margin-bottom:5px">
            <RadzenColumn Size="6">
                @if (SubjectEnum.IsNotNull() && SubjectEnum.Any())
                {
                    <RadzenDropDownDataGrid @bind-Value="@LessonObject.SUBJECT_ID"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            AllowFiltering="false"
                                            AllowClear="false"
                                            AllowSorting="false"
                                            ShowSearch="false"
                                            TextProperty="SUBJECT_NAME"
                                            ValueProperty="SUBJECT_ID"
                                            Data=@SubjectEnumFiltered
                                            Disabled="@(LessonObject.IsCreated)"
                                            Change=@(args => OnDropDownChange(args, "SUBJECT"))
                                            Style="width:inherit" />
                }
            </RadzenColumn>
            <RadzenColumn Size="6">
                @if (LevelEnum.IsNotNull() && LevelEnum.Any())
                {
                    <RadzenDropDownDataGrid @bind-Value="@LessonObject.LEVEL_ID"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            AllowFiltering="false"
                                            AllowClear="false"
                                            AllowSorting="false"
                                            ShowSearch="false"
                                            TextProperty="LEVEL_NAME"
                                            ValueProperty="LEVEL_ID"
                                            Data=@LevelEnumFiltered
                                            Disabled="@(LessonObject.IsCreated)"
                                            Change=@(args => OnDropDownChange(args, "LEVEL"))
                                            Style="width:inherit" />
                }
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>

    <RadzenCard Style="width:inherit; margin-top:10px">
        <RadzenRow Style="margin-bottom:5px">
            <RadzenColumn Size="4">
                <RadzenLabel Text="Day" />
            </RadzenColumn>
            <RadzenColumn Size="4">
                <RadzenLabel Text="Time Start" />
            </RadzenColumn>
            <RadzenColumn Size="4">
                <RadzenLabel Text="Time Stop" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow Style="margin-bottom:5px">
            <RadzenColumn Size="4">
                <RadzenDatePicker @bind-Value="@LessonObject.DATE_START"
                                  DateFormat="yyyy-MM-dd"
                                  Disabled="@(!DateTimePickerEnabled)"
                                  Change=@(OnDateChange) />
            </RadzenColumn>
            <RadzenColumn Size="4">
                <RadzenDropDown @bind-Value=@Term.TimeStart
                                TValue="TimeOnly"
                                AllowClear="false"
                                Data=@QuarterOnlyList
                                Disabled="@(!DateTimePickerEnabled)"
                                Change=@(args => OnDayDropDownChange(args, "TIME_START")) />
            </RadzenColumn>
            <RadzenColumn Size="4">
                <RadzenDropDown @bind-Value=@Term.TimeStop
                                TValue="TimeOnly"
                                AllowClear="false"
                                Data=@QuarterOnlyList
                                Disabled="@(!DateTimePickerEnabled)"
                                Change=@(args => OnDayDropDownChange(args, "TIME_STOP")) />
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>

    <RadzenCard Style="width:inherit; margin-top:10px">
        <RadzenRow Style="margin-bottom:5px"><RadzenColumn Size="12" Style="margin-top:7px"><RadzenLabel Text="Topic" /></RadzenColumn></RadzenRow>
        <RadzenRow Style="margin-bottom:5px"><RadzenColumn Size="12" Style="margin-top:7px"><RadzenTextArea Rows="4" ReadOnly="@TopicIsReadOnly" @bind-Value="@LessonObject.TOPIC" Style="width:inherit" Change="@(args => OnTopicUpdate("TOPIC"))" /></RadzenColumn></RadzenRow>
    </RadzenCard>

    <RadzenCard Style="width:inherit; margin-top:10px" Visible="LessonObject.LESSON_STATUS_ID == 6">
        <RadzenRow Style="margin-bottom:5px">
            <RadzenColumn Size="5" Style="margin-top:10px; text-align:right">
                <RadzenLabel Text="Students' Rating" />
            </RadzenColumn>
            <RadzenColumn Size="4" Style="margin-top:10px; text-align:center">
                <RadzenRating Stars="5" Value=@LessonObject.RATING_VALUE Style="margin-left:10px; height:30px; display:table; visibility:visible" ReadOnly=@RatingIsReadOnly MouseEnter=@(args => ShowRatingTooltip(args, @LessonObject.RATING_NAME)) Change="@(args => OnRatingUpdate(args))"></RadzenRating>
            </RadzenColumn>
            <RadzenColumn Size="3"></RadzenColumn>
        </RadzenRow>
    </RadzenCard>
}

@code {
    [Parameter]
    public LessonModel LessonObject { get; set; }
    private bool IsObjectLessonChanged { get; set; } = false;

    AppState AppState { get; set; } = new AppState();
    string msg { get; set; }
    string Today { get { return DateTime.Now.ToString("D", new CultureInfo("en-EN")); } }
    private bool IsRendered { get; set; } = false;
    private string AppVersion { get; set; }
    private static NLog.ILogger AppLogger = NLog.LogManager.GetCurrentClassLogger();
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    private string NotificationPosition { get { return AppConfig.GetSection("PopUpNotifications").GetValue<string>("Position"); } }
    private int NotificationDuration { get { return AppConfig.GetSection("PopUpNotifications").GetValue<int>("Duration"); } }

    private UserModel UserObject { get; set; } = new UserModel();
    private IEnumerable<UserModel> UserEnum;
    private IEnumerable<LessonStatusModel> LessonStatusEnum;
    private IEnumerable<SubjectModel> SubjectEnum;
    private IEnumerable<SubjectModel> SubjectEnumFiltered;
    private IEnumerable<LevelModel> LevelEnum;
    private IEnumerable<LevelModel> LevelEnumFiltered;
    private IEnumerable<CompetenceModel> CompetenceEnum;
    private IEnumerable<RatingModel> RatingEnum;
    private IEnumerable<TimeOnly> QuarterOnlyList = TimeHelper.GetDailyQuartersAsTimeOnly();
    private TermItem Term { get; set; } = new TermItem();
    private int PreviousRating { get; set; } = 0;

    private bool RatingIsReadOnly
    {
        get
        {
            if (LessonObject.IsNotNull() && UserObject.IsNotNull())
                return (UserObject.IsTutor || !LessonObject.IsCreated || PreviousRating.IsPositive());
            else return true;
        }
    }

    private bool TopicIsReadOnly
    {
        get
        {
            if (LessonObject.IsNotNull() && UserObject.IsNotNull())
                return (LessonObject.LESSON_STATUS_ID == 6);
            else return true;
        }
    }

    private bool SaveEnabled
    {
        get
        {
            bool retval = false;

            if (LessonObject.IsNotNull())
            {
                // ACCEPTED
                if ((IsObjectLessonChanged) && (LessonObject.LESSON_STATUS_ID == 2))
                    retval = true;
                // NEW
                else if (LessonObject.IsCreated.IsFalse())
                    retval = true;
                //NOT RATED
                else if (LessonObject.HasEnded && LessonObject.IsRated && IsObjectLessonChanged)
                    retval = true;

            }

            return retval;
        }
    }

    private bool DateTimePickerEnabled
    {
        get
        {
            if (LessonObject.IsNotNull())
            {
                return ((LessonObject.LESSON_STATUS_ID == 2) || ((LessonObject.LESSON_STATUS_ID == 1) && (!LessonObject.IsCreated)));
            }
            else return true;
        }
    }

    private bool AcceptEnabled
    {
        get
        {
            bool retval = false;

            if (LessonObject.IsNotNull())
            {
                // PENDING
                if ((LessonObject.LESSON_STATUS_ID == 1) && UserObject.IsTutor)
                    retval = true;
                // POSTPONED BY STRUDENT
                else if ((LessonObject.LESSON_STATUS_ID == 4) && UserObject.IsTutor)
                    retval = true;
                // POSTPONED BY TUTOR
                else if ((LessonObject.LESSON_STATUS_ID == 5) && UserObject.IsStudent)
                    retval = true;
            }

            return retval;
        }
    }

    private bool DeleteEnabled
    {
        get
        {
            bool retval = false;

            if (LessonObject.IsNotNull())
            {
                retval = LessonObject.LESSON_STATUS_ID != 6 ;
            }

            return retval;
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        AppVersion = Assembly.GetExecutingAssembly().GetCustomAttribute<AssemblyInformationalVersionAttribute>().InformationalVersion;
        IsRendered = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await InitializeSession();
                IsRendered = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private async Task InitializeSession()
    {
        try
        {
            if (await SessionStorage.ContainKeyAsync("APP_STATE"))
            {
                AppState = await SessionStorage.GetItemAsync<AppState>("APP_STATE");
                await InitializeData();
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private async Task InitializeData()
    {
        try
        {
            if (AppState.UserInfo.IsNotNull() && LessonObject.IsNotNull())
            {
                UserObject = UserService.Select(AppState.UserInfo.USER_ID);
                UserEnum = await UserService.SelectAllAsync();
                SubjectEnum = await SubjectService.SelectAllAsync();
                CompetenceEnum = await CompetenceService.SelectAllByTutorAsync(LessonObject.TUTOR_ID);
                LessonStatusEnum = await LessonStatusService.SelectAllAsync();
                LevelEnum = await LevelService.SelectAllAsync();
                RatingEnum = await RatingService.SelectAllAsync();

                SubjectEnumFiltered = FilterSubjectList(LessonObject.TUTOR_ID);
                LevelEnumFiltered = FilterLevelList(LessonObject.SUBJECT_ID, LessonObject.TUTOR_ID);
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private IEnumerable<LevelModel> FilterLevelList(int subject_id, int tutor_id)
    {
        List<int> levelsOfTheSubject = CompetenceEnum.Where(x => x.TUTOR_ID == tutor_id && x.SUBJECT_ID == subject_id).Select(y => y.LEVEL_ID).ToList();
        return LevelEnum.Where(x => levelsOfTheSubject.Contains(x.LEVEL_ID));
    }

    private IEnumerable<SubjectModel> FilterSubjectList(int tutor_id)
    {
        List<int> tutorSubjects = CompetenceEnum.Where(x => x.TUTOR_ID == tutor_id).Select(y => y.SUBJECT_ID).ToList();
        return SubjectEnum.Where(x => tutorSubjects.Contains(x.SUBJECT_ID));
    }

    protected override void OnParametersSet()
    {
        if (LessonObject.IsNotNull())
        {
            PreviousRating = LessonObject.RATING_VALUE;
            Term.SelectedDay = LessonObject.DATE_START;
            Term.TimeStart = TimeOnly.FromDateTime(LessonObject.DATE_START);
            Term.TimeStop = TimeOnly.FromDateTime(LessonObject.DATE_STOP);
        }
    }

    private void OnDateChange()
    {
        IsObjectLessonChanged = true;
    }

    async Task OnAdd()
    {
        await LessonService.CreateAsync(LessonObject);
    }

    async Task OnUpdate()
    {
        await LessonService.UpdateAsync(LessonObject);
    }

    async Task OnCancel()
    {
        await LessonService.DeleteAsync(LessonObject.LESSON_ID);
    }

    void OnSubmit(LessonModel lesson)
    {
        DialogService.Close(lesson);
    }

    private async Task OnDropDownChange(object value, string key)
    {
        if (key == "LESSON_STATUS")
        {
            // filter LessonStatusEnum zależnie od kontakestu
            LessonStatusEnum = await LessonStatusService.SelectAllAsync();
        }

        if (key == "SUBJECT")
        {
            LevelEnumFiltered = FilterLevelList(LessonObject.SUBJECT_ID, LessonObject.TUTOR_ID);
            LessonObject.LEVEL_ID = LevelEnumFiltered.First().LEVEL_ID;
        }

        IsObjectLessonChanged = true;

        StateHasChanged();
    }

    private void OnDayDropDownChange(object value, string key)
    {
        if ((key == "TIME_START") && (Term.TimeStart > Term.TimeStop))
        {
            Term.TimeStop = Term.TimeStart;
        }
        else if ((key == "TIME_STOP") && (Term.TimeStop < Term.TimeStart))
        {
            Term.TimeStart = Term.TimeStop;
        }

        LessonObject.DATE_START = new DateTime(LessonObject.DATE_START.Year, LessonObject.DATE_START.Month, LessonObject.DATE_START.Day, Term.TimeStart.Hour, Term.TimeStart.Minute, 0);
        LessonObject.DATE_STOP = new DateTime(LessonObject.DATE_STOP.Year, LessonObject.DATE_STOP.Month, LessonObject.DATE_STOP.Day, Term.TimeStop.Hour, Term.TimeStop.Minute, 0);

        IsObjectLessonChanged = true;
        StateHasChanged();
    }


    private async Task LessonSave()
    {
        // NEW => PENDING ACCEPT
        if (LessonObject.IsCreated.IsFalse())
        {
            LessonObject.LESSON_STATUS_ID = 1;
        }

        // ACCEPTED => POSTPONED BY STUDENT
        if (LessonObject.LESSON_STATUS_ID == 2 && UserObject.IsStudent)
        {
            LessonObject.LESSON_STATUS_ID = 4;
        }

        // ACCEPTED => POSTPONED BY TUTOR
        if (LessonObject.LESSON_STATUS_ID == 2 && UserObject.IsTutor)
        {
            LessonObject.LESSON_STATUS_ID = 5;
        }

        var retval = await LessonService.UpsertAsync(LessonObject);

        if (retval.IsPositive())
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Save", Detail = "Lesson Saved Successfully", Duration = NotificationDuration, Style = NotificationPosition });
            IsObjectLessonChanged = false;
            StateHasChanged();
            await SessionStorage.SetItemAsync<AppState>("APP_STATE", AppState);
            DialogService.Close();
        }
        else
        {
            switch (retval)
            {
                case -2:
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Save", Detail = "Past Lesson cannot be changed", Duration = NotificationDuration, Style = NotificationPosition });
                    break;
                case -3:
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Save", Detail = "Tutor is not available at selected time", Duration = NotificationDuration, Style = NotificationPosition });
                    break;
                case -4:
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Save", Detail = "Another studnet registered lesson at selected time", Duration = NotificationDuration, Style = NotificationPosition });
                    break;
                case -5:
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Save", Detail = "You registered another lesson at selected time", Duration = NotificationDuration, Style = NotificationPosition });
                    break;
                default:
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Save", Detail = "Lesson not saved", Duration = NotificationDuration, Style = NotificationPosition });
                    break;
            }
        }
    }

    private async Task LessonAccept()
    {
        int retval = 0;

        try
        {
            // PENDING => ACCEPTED
            if (LessonObject.LESSON_STATUS_ID == 1 && UserObject.IsTutor)
            {
                LessonObject.LESSON_STATUS_ID = 2;
            }

            // POSTPONED BY STUDENT => ACCEPTED
            if (LessonObject.LESSON_STATUS_ID == 4 && UserObject.IsTutor)
            {
                LessonObject.LESSON_STATUS_ID = 2;
            }

            // POSTPONED BY TUTOR => ACCEPTED
            if (LessonObject.LESSON_STATUS_ID == 5 && UserObject.IsStudent)
            {
                LessonObject.LESSON_STATUS_ID = 2;
            }

            retval = await LessonService.UpsertAsync(LessonObject);
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }

        if (retval.IsPositive())
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Accept", Detail = "Lesson Accepted Successfully", Duration = NotificationDuration, Style = NotificationPosition });
            IsObjectLessonChanged = false;
            StateHasChanged();
            await SessionStorage.SetItemAsync<AppState>("APP_STATE", AppState);
            DialogService.Close();
        }
        else
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Accept", Detail = "Lesson Not Accepted", Duration = NotificationDuration, Style = NotificationPosition });
        }
    }

    private async Task LessonDelete()
    {
        if (LessonObject.LESSON_STATUS_ID != 6)
        {
            LessonObject.LESSON_STATUS_ID = 3;
            await LessonService.UpsertAsync(LessonObject);
        }
        else
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Delete", Detail = "Lesson Cannot Be Deleted", Duration = NotificationDuration, Style = NotificationPosition });
            return;
        }

        var retval = await LessonService.DeleteAsync(LessonObject.LESSON_ID);

        if (retval.IsPositive())
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Delete", Detail = "Lesson Deleted Successfully", Duration = NotificationDuration, Style = NotificationPosition });
            IsObjectLessonChanged = false;
            StateHasChanged();
            await SessionStorage.SetItemAsync<AppState>("APP_STATE", AppState);
            DialogService.Close();
        }
        else
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Delete", Detail = "Lesson Not Deleted", Duration = NotificationDuration, Style = NotificationPosition });
        }
    }

    private void OnTopicUpdate(string val)
    {
        IsObjectLessonChanged = true;
        StateHasChanged();
    }

    private void OnRatingUpdate(int val)
    {
        RatingModel rating = RatingEnum.FirstOrDefault(x => x.RATING_VALUE == val);

        if (rating.IsNotNull())
        {
            IsObjectLessonChanged = true;
            LessonObject.RATING_ID = rating.RATING_ID;
            LessonObject.RATING_VALUE = rating.RATING_VALUE;
            LessonObject.RATING_NAME = rating.RATING_NAME;
        }
    }

    private void ShowNotification(NotificationMessage message)
    {
        try
        {
            NotificationService.Notify(message);
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private void ShowRatingTooltip(ElementReference elementReference, string msg)
    {
        if (!RatingIsReadOnly)
        {
            ShowTooltip(elementReference, msg);
        }
    }

    private void ShowTooltip(ElementReference elementReference, string msg)
    {
        TooltipOptions options = new TooltipOptions() { Duration = NotificationDuration };
        TooltipService.Open(elementReference, msg, options);
    }

    public void Dispose()
    {
    }
}
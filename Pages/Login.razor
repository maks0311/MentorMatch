@page "/login"

@implements IDisposable

@using Dapper;
@using System.Data.SqlClient;
@using Radzen;
@using Radzen.Blazor;
@using Radzen.Blazor.Rendering;
@using System.Text;
@using Microsoft.Extensions.Configuration;
@using System.Globalization;
@using Microsoft.Extensions.Logging;
@using Microsoft.Extensions.Logging.EventLog;
@using System.Reflection;
@using Blazored.SessionStorage;
@using Mentor.Data;

@inject IConfiguration AppConfig
@inject ISessionStorageService SessionStorage
@inject IPermissionService PermissionService;

@inject TooltipService TooltipService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject DialogService DialogService

@inject IUserService UserService;


@if (AppState.IsNull())
{
	<p>Loading menu</p>
}
else
{
	<TopMenu AppState="@AppState" IsRendered="@IsRendered"></TopMenu>
}

<div class="row" style="margin-top:200px">
	<div class="col-3"></div>
	<div class="col-6">
		<RadzenCard Style="width:600px;">
			<div class="row" style="padding: 10px; width:inherit; display:flex; align-items:center; font-size:20px">
                <RadzenIcon Icon="account_balance" Style="font-size: 50px; color: indigo; margin-right: 10px; cursor: pointer"></RadzenIcon> MentorMatch
			</div>
			<hr class="my-12" />
			<div class="row" style="padding: 20px; width:inherit">
				<div class="col-4" style="text-align:right;">
					User Name / E-mail:
				</div>
				<div class="col-8">
					<RadzenTextBox Change=@(args => OnChange(args, "USER_NAME")) MouseEnter="@(args => ShowTooltip(args, "Enter your login or registered e-mail address"))" Style="width:250px" />
				</div>
			</div>
			<div class="row" style="padding: 20px; width:inherit">
				<div class="col-4" style="width:100px; text-align:right;">
					Password:
				</div>
				<div class="col-8" style="width:400px">
					<RadzenPassword Change=@(args => OnChange(args, "USER_PASS")) MouseEnter="@(args => ShowTooltip(args, "Enter your password"))" Style="width:250px" />
				</div>
			</div>

			<div class="row" style="padding: 20px;">
				<div class="col-4" />

				@if (AppState.IsNull())
				{
					<p><em>Loading...</em></p>
				}
				else
				{
					if (AppState.UserInfo.IsAuthenticated == false)
					{
						<div class="col-8" style="align-content:end">
							<RadzenButton Click=@(args => OnClick("LOGIN")) Text="Login" Style="margin-left:10px; margin-bottom: 20px; width: 150px" ButtonStyle="ButtonStyle.Secondary" />
						</div>
					}
					else
					{
						<div class="col-8" style="align-content:end">
							<RadzenButton Click=@(args => OnClick("LOGOUT")) Text="Logout" Style="margin-left: 10px; margin-bottom: 20px; width: 150px" ButtonStyle="ButtonStyle.Primary" />
						</div>
					}
				}
			</div>
		</RadzenCard>
	</div>
	<div class="col-3"></div>
</div>


@code {
    private AppState AppState { get; set; } = new AppState();
    private string msg { get; set; }
    private bool IsRendered { get; set; } = false;

    private static NLog.ILogger AppLogger = NLog.LogManager.GetCurrentClassLogger();

    private string NotificationPosition { get { return AppConfig.GetSection("PopUpNotifications").GetValue<string>("Position"); } }
    private int NotificationDuration { get { return AppConfig.GetSection("PopUpNotifications").GetValue<int>("Duration"); } }

    private int LoginMinLen { get { return AppConfig.GetSection("Login").GetValue<int>("LoginMinLen"); } }
    private int PassMinLen { get { return AppConfig.GetSection("Login").GetValue<int>("PassMinLen"); } }

    private string UserName = string.Empty;
    private string UserPass = string.Empty;
    private int FailedLogonAttempts { get; set; } = 0;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        IsRendered = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeSession();

            IsRendered = true;

            StateHasChanged();
        }
    }

    private async Task InitializeSession()
    {
        try
        {
            if (await SessionStorage.ContainKeyAsync("APP_STATE"))
            {
                AppState = await SessionStorage.GetItemAsync<AppState>("APP_STATE");
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private void OnChange(string value, string key)
    {
        if (key == "USER_NAME")
        {
            UserName = value;
        }

        if (key == "USER_PASS")
        {
            UserPass = value;
        }
    }

    private async Task OnClick(string key)
    {
        if (key == "LOGIN")
        {
            if (string.IsNullOrEmpty(UserName) || string.IsNullOrEmpty(UserPass))
            {
                msg = "Username and Password cannot be empty. Please try again.";
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Authentication", Detail = msg, Duration = NotificationDuration, Style = NotificationPosition });
                return;
            }

            int UserID = UserService.Authenticate(UserName, UserPass);

            if (UserID > 0)
            {
                AppState.UserInfo = await UserService.SelectAsync(UserID);
                await SessionStorage.SetItemAsync<AppState>("APP_STATE", AppState);

                NavigationManager.NavigateTo("./");
            }
            else
            {
                AppState.UserInfo = new();

                switch (UserID)
                {
                    case 0:
                        FailedLogonAttempts++;
                        int MaximumFailedLogonAttempts = AppConfig.GetSection("Login").GetValue<int>("MaximumFailedLogonAttempts");
                        msg = "Incorrect password.";
                        break;
                    case -1:
                        msg = "Login failed. User [" + UserName + "] does not exist";
                        break;
                    case -2:
                        msg = "Cannot login. User [" + UserName + "] is disabled";
                        break;
                    default:
                        msg = "Login failed";
                        break;
                }

                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Authentication", Detail = msg, Duration = NotificationDuration, Style = NotificationPosition });
            }
        }

        if (key == "LOGOUT")
        {
            AppState.UserInfo = new();
            await SessionStorage.SetItemAsync<AppState>("APP_STATE", AppState);
        }
    }

    private void ShowNotification(NotificationMessage message)
    {
        try
        {
            NotificationService.Notify(message);
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private void ShowTooltip(ElementReference elementReference, string msg)
    {
        TooltipOptions options = new TooltipOptions() { Duration = NotificationDuration };
        TooltipService.Open(elementReference, msg, options);
    }

    public void Dispose()
    {
    }
}

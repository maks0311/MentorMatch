@page "/search"

@using System
@using System.Text
@using System.Reflection
@using Dapper;
@using System.Data.SqlClient;
@using Radzen;
@using Radzen.Blazor;
@using Radzen.Blazor.Rendering;
@using Microsoft.Extensions.Configuration;
@using System.Globalization;
@using Microsoft.Extensions.Logging;
@using Microsoft.Extensions.Logging.EventLog;
@using Blazored.SessionStorage;
@using Mentor.Data;

@inject IConfiguration AppConfig
@inject ISessionStorageService SessionStorage
@inject IPermissionService PermissionService;

@inject TooltipService TooltipService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject DialogService DialogService

@inject ITutorService TutorService;
@inject ISubjectService SubjectService;
@inject ILevelService LevelService;
@inject IWorkTypeService WorkTypeService;
@inject IRatingService RatingService;
@inject ICityService CityService;


@if (AppState.IsNull())
{
    <p>Loading menu...</p>
}
else
{
    <TopMenu AppState="@AppState" IsRendered="@IsRendered"></TopMenu>
}

@if ((AppState.UserInfo.IsNotNull()) && (AppState.UserInfo.IsAuthenticated.IsTrue()))
{
    <div class="row" style="margin-top:60px">
        <div class="col-md-12">
            <RadzenCard Style="margin-bottom:10px">
                <RadzenRow>
                    <RadzenColumn Size="2"><RadzenText Text="Tutor"></RadzenText></RadzenColumn>
                    <RadzenColumn Size="2"><RadzenText Text="Subject"></RadzenText></RadzenColumn>
                    <RadzenColumn Size="2"><RadzenText Text="Level"></RadzenText></RadzenColumn>
                    <RadzenColumn Size="2"><RadzenText Text="Work Type"></RadzenText></RadzenColumn>
                    <RadzenColumn Size="2"><RadzenText Text="City"></RadzenText></RadzenColumn>
                    <RadzenColumn Size="8"></RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn Size="2">
                        <RadzenTextBox @bind-Value=@SearchTutorName Placeholder="Enter Tutor's Name/Surname" Style="width:inherit"></RadzenTextBox>
                    </RadzenColumn>
                    <RadzenColumn Size="2">
                        <RadzenDropDown @bind-Value=@SearchSubjectObject.SUBJECT_ID
                                        TextProperty="SUBJECT_NAME"
                                        ValueProperty="SUBJECT_ID"
                                        TValue="int"
                                        AllowClear="true"
                                        Style="width:inherit"
                                        Data=@SubjectEnum
                                        FilterAsYouType="true"
                                        Placeholder="Select Subject" />
                    </RadzenColumn>
                    <RadzenColumn Size="2">
                        <RadzenDropDown @bind-Value=@SearchLevelObject.LEVEL_ID
                                        TextProperty="LEVEL_NAME"
                                        ValueProperty="LEVEL_ID"
                                        TValue="int"
                                        AllowClear="true"
                                        Style="width:inherit"
                                        Data=@LevelEnum
                                        FilterAsYouType="true"
                                        Placeholder="Select Level" />
                    </RadzenColumn>
                    <RadzenColumn Size="2">
                        <RadzenDropDown @bind-Value=@SearchWorkTypeObject.WORK_TYPE_ID
                                        TextProperty="WORK_TYPE_NAME"
                                        ValueProperty="WORK_TYPE_ID"
                                        TValue="int"
                                        AllowClear="true"
                                        Style="width:inherit"
                                        Data=@WorkTypeDropdownEnum
                                        FilterAsYouType="false"
                                        Placeholder="Select Work Type"/>
                    </RadzenColumn>
                    <RadzenColumn Size="2">
                        <RadzenDropDown @bind-Value=@SearchCityObject.CITY_ID
                                        TextProperty="CITY_NAME"
                                        ValueProperty="CITY_ID"
                                        TValue="int"
                                        AllowClear="true"
                                        Style="width:inherit"
                                        Disabled=@CityDisabled
                                        Data=@CityEnum
                                        FilterAsYouType="true"
                                        Placeholder="Select City" />
                    </RadzenColumn>
                    <RadzenColumn Size="6">
                        <RadzenButton Text="Search" Icon="search" Click="SearchTutors" ButtonStyle="ButtonStyle.Secondary"></RadzenButton>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenCard>

            @if (@TutorEnum.IsNotNull() && @TutorEnum.Any())
            {
                <RadzenCard>
                    <RadzenDataGrid Data="@TutorEnum"
                                    AllowMultiColumnSorting="false"
                                    ClearFilterText="true"
                                    AllowColumnResize="false"
                                    FilterMode="FilterMode.Simple"
                                    AllowPaging="true"
                                    AllowSorting="true"
                                    AllowFiltering="false"
                                    AllowVirtualization="true"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    LogicalFilterOperator="LogicalFilterOperator.And"
                                    Visible="@TutorEnum.Count().IsPositive()">
                        <Columns>
                            <RadzenDataGridColumn TItem="TutorModel" Property="TUTOR_ID" Title="Edit" Frozen="true" Sortable="false" Filterable="false" Width="60px">
                                <Template Context="TutorModel">
                                    <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="more_horiz" Click=@(() => TutorView(TutorModel.TUTOR_ID)) />
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="TutorModel" Property="TUTOR_FULLNAME" Title="Fullname" TextAlign="TextAlign.Left" />
                            <RadzenDataGridColumn TItem="TutorModel" Property="WORK_TYPE_NAME" FilterProperty="@WorkTypeObject.WORK_TYPE_NAME" Title="Work type" Frozen="true" TextAlign="TextAlign.Left">
                                <FilterTemplate>
                                    <RadzenDropDown @bind-Value=@WorkTypeObject.WORK_TYPE_ID
                                                    TextProperty="WORK_TYPE_NAME"
                                                    ValueProperty="WORK_TYPE_ID"
                                                    TValue="int"
                                                    AllowClear="true"
                                                    Style="width:100%"
                                                    Data=@WorkTypeEnum
                                                    Change="@(args => OnFilterChange(args, "WORK_TYPE"))" />
                                </FilterTemplate>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="TutorModel" Property="TUTOR_RATING" Title="Rating" Frozen="true" Sortable="true" TextAlign="TextAlign.Left">
                                <FilterTemplate>
                                    <RadzenDropDown @bind-Value=@RatingObject.RATING_VALUE
                                                    TextProperty="RATING_NAME"
                                                    ValueProperty="RATING_VALUE"
                                                    TValue="int"
                                                    AllowClear="false"
                                                    Style="width:100%"
                                                    Data=@RatingEnum
                                                    Change="@(args => OnFilterChange(args, "RATING"))" />
                                </FilterTemplate>
                                <Template Context="TutorModel">
                                    <RadzenRating @bind-Value="TutorModel.TUTOR_RATING" ReadOnly="true" />
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </RadzenCard>
            }
            else
            {
                <RadzenCard>
                    <RadzenRow>
                        <RadzenColumn Size="4"></RadzenColumn>
                        <RadzenColumn Size="4">
                            <RadzenLabel Text="Select criteria to find best Tutors" Style="font-size:xx-large; margin-top:100px; margin-bottom:100px; text-align:center"></RadzenLabel>
                        </RadzenColumn>
                        <RadzenColumn Size="4"></RadzenColumn>
                    </RadzenRow>
                </RadzenCard>
            }
        </div>
    </div>
}


@code {
    AppState AppState { get; set; } = new AppState();
    string msg { get; set; }
    string Today { get { return DateTime.Now.ToString("D", new CultureInfo("en-EN")); } }
    private bool IsRendered { get; set; } = false;
    private string AppVersion { get; set; }
    private static NLog.ILogger AppLogger = NLog.LogManager.GetCurrentClassLogger();

    private TutorModel TutorObject { get; set; } = new TutorModel();
    private WorkTypeModel WorkTypeObject { get; set; } = new WorkTypeModel();
    private RatingModel RatingObject { get; set; } = new RatingModel();

    private string SearchTutorName { get; set; } = string.Empty;
    private SubjectModel SearchSubjectObject { get; set; } = new SubjectModel();
    private LevelModel SearchLevelObject { get; set; } = new LevelModel();
    private WorkTypeModel SearchWorkTypeObject { get; set; } = new WorkTypeModel();
    private CityModel SearchCityObject { get; set; } = new CityModel();

    private IEnumerable<TutorModel> TutorEnum { get; set; }
    private IEnumerable<LevelModel> LevelEnum { get; set; }
    private IEnumerable<SubjectModel> SubjectEnum { get; set; }
    private IEnumerable<WorkTypeModel> WorkTypeEnum { get; set; }
    private IEnumerable<WorkTypeModel> WorkTypeDropdownEnum { get; set; }
    private IEnumerable<RatingModel> RatingEnum { get; set; }
    private IEnumerable<CityModel> CityEnum { get; set; }

    private bool CityDisabled
    {
        get
        {
            if (SearchWorkTypeObject.WORK_TYPE_ID == 2)
            {
                return false;
            }
            else
            {
                return true;
            }
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        AppVersion = Assembly.GetExecutingAssembly().GetCustomAttribute<AssemblyInformationalVersionAttribute>().InformationalVersion;
        IsRendered = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await InitializeSession();
                await InitializeData();

                IsRendered = true;

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private async Task InitializeSession()
    {
        try
        {
            if (await SessionStorage.ContainKeyAsync("APP_STATE"))
            {
                AppState = await SessionStorage.GetItemAsync<AppState>("APP_STATE");
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private async Task InitializeData()
    {
        try
        {
            TutorEnum = await TutorService.SearchAllAsync(string.Empty, 0, 0, 0, 0);
            LevelEnum = await LevelService.SelectAllAsync();
            SubjectEnum = await SubjectService.SelectAllAsync();
            WorkTypeEnum = await WorkTypeService.SelectAllAsync();
            WorkTypeDropdownEnum = WorkTypeEnum.Where(args => args.WORK_TYPE_ID != 3);
            RatingEnum = await RatingService.SelectAllAsync();
            CityEnum = await CityService.SelectAllAsync();
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private async Task SearchTutors()
    {
        TutorEnum = await TutorService.SearchAllAsync(SearchTutorName, SearchSubjectObject.SUBJECT_ID, SearchLevelObject.LEVEL_ID, SearchWorkTypeObject.WORK_TYPE_ID, SearchCityObject.CITY_ID);
    }

    private void OnFilterChange(object value, string key)
    {
        if (key == "WORK_TYPE")
        {
            TutorEnum = TutorEnum.Where(tutor => tutor.WORK_TYPE_ID == WorkTypeObject.WORK_TYPE_ID);
        }

        if (key == "RATING")
        {
            TutorEnum = TutorEnum.Where(tutor => tutor.TUTOR_RATING == RatingObject.RATING_VALUE);
        }
    }

    async Task TutorView(int TutorID)
    {
        try
        {
            AppState.SetParamAsInteger("TUTOR_ID", TutorID);
            await SessionStorage.SetItemAsync<AppState>("APP_STATE", AppState);
            NavigationManager.NavigateTo("/tutor");
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }
}

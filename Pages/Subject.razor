@page "/subject"

@implements IDisposable

@using System
@using System.Text
@using System.Reflection
@using Dapper;
@using System.Data.SqlClient;
@using Radzen;
@using Radzen.Blazor;
@using Radzen.Blazor.Rendering;
@using Microsoft.Extensions.Configuration;
@using System.Globalization;
@using Microsoft.Extensions.Logging;
@using Microsoft.Extensions.Logging.EventLog;
@using Blazored.SessionStorage;
@using Mentor.Data;
@using System.Text.RegularExpressions;

@inject IConfiguration AppConfig
@inject ISessionStorageService SessionStorage
@inject IPermissionService PermissionService;

@inject TooltipService TooltipService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject DialogService DialogService

@inject IUserService UserService
@inject IGroupService GroupService
@inject IWorkTypeService WorkTypeService;
@inject ILevelService LevelService;
@inject ISubjectService SubjectService;
@inject ICompetenceService CompetenceService;
@inject ILessonService LessonService;

@if (AppState.IsNull())
{
    <p>Loading menu...</p>
}
else
{
    <TopMenu AppState="@AppState" IsRendered="@IsRendered"></TopMenu>
}

@if (SubjectObject.IsNotNull())
{
    <div class="row" style="margin-top:60px">
        <div class="col-md-12">
            <RadzenTabs RenderMode="TabRenderMode.Client" Style="height: max-content">
                <Tabs>
                    <RadzenTabsItem Text="Subject">
                        <RadzenCard>
                            <RadzenButton Text="Save" Icon="save" Click="SubjectSave" Disabled="@DisableSave" Style="margin-right:5px" ButtonStyle="ButtonStyle.Secondary"></RadzenButton>
                            <RadzenButton Text="Delete" Icon="cancel" Click="SubjectDelete" Disabled="@DisableDelete" ButtonStyle="ButtonStyle.Primary"></RadzenButton>
                        </RadzenCard>

                        <RadzenCard>
                            <RadzenStack Style="width:inherit" Orientation="Orientation.Horizontal">
                                <RadzenStack Style="width:50%">
                                    <RadzenRow>
                                        <RadzenColumn Size="@ColumnLabelSize"><RadzenText Text="Subject Name"></RadzenText></RadzenColumn>
                                        <RadzenColumn Size="@ColumnControlSize"><RadzenTextBox Style="width:inherit" @bind-Value=@SubjectObject.SUBJECT_NAME MaxLength="50" Placeholder="" Change="@OnChange"></RadzenTextBox></RadzenColumn>
                                    </RadzenRow>
                                    <RadzenRow>
                                        <RadzenColumn Size="@ColumnLabelSize"><RadzenText Text="Active"></RadzenText></RadzenColumn>
                                        <RadzenColumn Size="@ColumnControlSize"><RadzenCheckBox Style="width:min-content" @bind-Value=@SubjectObject.IS_ACTIVE TValue="bool" TriState="false" Change=@(args => OnCheckBoxChange(args, "IS_ACTIVE")) /></RadzenColumn>
                                    </RadzenRow>
                                </RadzenStack>
                            </RadzenStack>

                        </RadzenCard>
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>
        </div>
    </div>
}



@code {
    AppState AppState { get; set; } = new AppState();
    string msg { get; set; }
    string Today { get { return DateTime.Now.ToString("D", new CultureInfo("en-EN")); } }
    private bool IsRendered { get; set; } = false;
    private string AppVersion { get; set; }
    private static NLog.ILogger AppLogger = NLog.LogManager.GetCurrentClassLogger();
    private bool DisableSave { get; set; } = true;
    private bool DisableDelete { get; set; } = false;

    string NotificationPosition { get { return AppConfig.GetSection("PopUpNotifications").GetValue<string>("Position"); } }
    int NotificationDuration { get { return AppConfig.GetSection("PopUpNotifications").GetValue<int>("Duration"); } }

    private int ColumnLabelSize = 2;
    private int ColumnControlSize = 10;

    private SubjectModel SubjectObject { get; set; } = new SubjectModel();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        AppVersion = Assembly.GetExecutingAssembly().GetCustomAttribute<AssemblyInformationalVersionAttribute>().InformationalVersion;
        IsRendered = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await InitializeSession();
                IsRendered = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private async Task InitializeSession()
    {
        try
        {
            if (await SessionStorage.ContainKeyAsync("APP_STATE"))
            {
                AppState = await SessionStorage.GetItemAsync<AppState>("APP_STATE");
                await InitializeData();
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private async Task InitializeData()
    {
        try
        {
            if (AppState.IsNotNull())
            {
                int subjectID = AppState.GetParamAsInteger("SUBJECT_ID", 0);
                SubjectObject = await SubjectService.SelectAsync(subjectID);
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private async Task SubjectSave()
    {
        try
        {
            if (SubjectObject.IsNotNull())
            {
                var retval = await SubjectService.UpdateAsync(SubjectObject);

                if (retval == 1)
                {
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Subject", Detail = "Saved", Duration = NotificationDuration, Style = NotificationPosition });
                    DisableSave = true;
                }
                else
                {
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Subject", Detail = "Not Saved", Duration = NotificationDuration, Style = NotificationPosition });
                }
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private async Task SubjectDelete()
    {
        try
        {
            await SubjectService.DeleteAsync(SubjectObject.SUBJECT_ID);
            DisableSave = true;
            NavigationManager.NavigateTo("/settings");
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private void OnChange()
    {
        DisableSave = false;
    }

    private void OnCheckBoxChange(bool? value, string name)
    {
        DisableSave = false;
    }

    private void ShowNotification(NotificationMessage message)
    {
        try
        {
            NotificationService.Notify(message);
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private void ShowTooltip(ElementReference elementReference, string msg)
    {
        TooltipOptions options = new TooltipOptions() { Duration = NotificationDuration };
        TooltipService.Open(elementReference, msg, options);
    }

    public void Dispose()
    {
    }
}

@page "/tutor"

@implements IDisposable

@using System
@using System.Text
@using System.Reflection
@using Dapper;
@using System.Data.SqlClient;
@using Radzen;
@using Radzen.Blazor;
@using Radzen.Blazor.Rendering;
@using Microsoft.Extensions.Configuration;
@using System.Globalization;
@using Microsoft.Extensions.Logging;
@using Microsoft.Extensions.Logging.EventLog;
@using Blazored.SessionStorage;
@using Mentor.Data;

@inject IConfiguration AppConfig
@inject ISessionStorageService SessionStorage
@inject IPermissionService PermissionService;

@inject TooltipService TooltipService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject DialogService DialogService

@inject IUserService UserService;
@inject ITutorService TutorService;
@inject ILessonService LessonService
@inject ILessonStatusService LessonStatusService
@inject ISubjectService SubjectService;
@inject ILevelService LevelService;
@inject ICompetenceService CompetenceService
@inject IWorkTypeService WorkTypeService;
@inject IRatingService RatingService;
@inject IAvailabilityService AvailabilityService


@if (AppState.IsNull())
{
    <p>Loading menu...</p>
}
else
{
    <TopMenu AppState="@AppState" IsRendered="@IsRendered"></TopMenu>
}

@if ((AppState.UserInfo.IsNotNull()) && (AppState.UserInfo.IsAuthenticated.IsTrue()))
{
    <div class="row" style="margin-top:60px">
        <div class="col-md-12">
            <RadzenTabs RenderMode="TabRenderMode.Client" Style="height:max-content">
                <Tabs>
                    <RadzenTabsItem Text="Tutor Info">
                        <RadzenRow>
                            <RadzenColumn Size="6">
                                <RadzenRow Style="margin-bottom:2px">
                                    <RadzenColumn Size="6"><RadzenText Text="Fullname"></RadzenText></RadzenColumn>
                                    <RadzenColumn Size="6"><RadzenText Text="Worktype"></RadzenText></RadzenColumn>
                                </RadzenRow>
                                <RadzenRow Style="margin-bottom:10px">
                                    <RadzenColumn Size="6"><RadzenTextBox Disabled="true" Style="width:inherit" @bind-Value=@TutorObject.TUTOR_FULLNAME></RadzenTextBox></RadzenColumn>
                                    <RadzenColumn Size="6"><RadzenTextBox Disabled="true" Style="width:inherit" @bind-Value=@TutorObject.WORK_TYPE_NAME></RadzenTextBox></RadzenColumn>
                                </RadzenRow>
                                <RadzenRow Style="margin-bottom:2px">
                                    <RadzenColumn Size="6"><RadzenText Text="Phone"></RadzenText></RadzenColumn>
                                    <RadzenColumn Size="6"><RadzenText Text="E-mail"></RadzenText></RadzenColumn>
                                </RadzenRow>
                                <RadzenRow Style="margin-bottom:10px">
                                    <RadzenColumn Size="6"><RadzenTextBox Disabled="true" Style="width:inherit" @bind-Value=@TutorObject.TUTOR_PHONE></RadzenTextBox></RadzenColumn>
                                    <RadzenColumn Size="6"><RadzenTextBox Disabled="true" Style="width:inherit" @bind-Value=@TutorObject.TUTOR_EMAIL></RadzenTextBox></RadzenColumn>
                                </RadzenRow>
                                <RadzenRow Style="margin-bottom:10px">
                                    <RadzenColumn Size="1"><RadzenText Text="Rating" Style="margin-top:7px;"></RadzenText></RadzenColumn>
                                    <RadzenColumn Size="11"><RadzenRating Style="margin-top:7px;" ReadOnly="true" @bind-Value="@TutorObject.TUTOR_RATING"></RadzenRating></RadzenColumn>
                                </RadzenRow>
                                <RadzenRow Style="margin-bottom:10px">
                                    <RadzenColumn Size="12">
                                        <RadzenTextArea Disabled="true" @bind-Value=@TutorObject.TUTOR_DESCRIPTION MaxLength="500" Rows="8" Style="width:inherit"></RadzenTextArea>
                                    </RadzenColumn>
                                </RadzenRow>
                            </RadzenColumn>
                            <RadzenColumn Size="6">
                                <RadzenRow Style="margin-bottom:2px">
                                    <RadzenText Text="Competences"></RadzenText>
                                </RadzenRow>
                                <RadzenRow Style="margin-bottom:12px">
                                    <RadzenDataGrid Data="@CompetenceEnum"
                                                    AllowMultiColumnSorting="true"
                                                    ClearFilterText="true"
                                                    AllowColumnResize="true"
                                                    FilterMode="FilterMode.Simple"
                                                    AllowFiltering="false"
                                                    AllowPaging="true"
                                                    AllowSorting="true"
                                                    AllowVirtualization="true"
                                                    ShowPagingSummary="true"
                                                    PageSize="7"
                                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    LogicalFilterOperator="LogicalFilterOperator.And"
                                                    Visible="true"
                                                    Style="width:inherit">
                                        <Columns>
                                            <RadzenDataGridColumn TItem="CompetenceModel" Property="SUBJECT_NAME" Filterable="false" Title="Subject" Frozen="true" TextAlign="TextAlign.Left" />
                                            <RadzenDataGridColumn TItem="CompetenceModel" Property="LEVEL_NAME" Title="Education Level" Frozen="true" TextAlign="TextAlign.Left" />
                                        </Columns>
                                    </RadzenDataGrid>
                                </RadzenRow>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenTabsItem>

                    <RadzenTabsItem Text="Calendar">
                        <RadzenScheduler @ref=@Scheduler
                                         Style="height:650px"
                                         TItem="LessonModel"
                                         Data=@LessonEnum
                                         StartProperty="DATE_START"
                                         EndProperty="DATE_STOP"
                                         TextProperty="CAPTION_FOR_TUTOR"
                                         SelectedIndex="0"
                                         SlotSelect=@OnSlotSelect
                                         SlotRender=@OnSlotRender
                                         AppointmentSelect=@OnLessonSelect>
                            <RadzenDayView MinutesPerSlot="15" TimeFormat="HH:mm" />
                            <RadzenWeekView MinutesPerSlot="15" TimeFormat="HH:mm" />
                            <RadzenMonthView MaxAppointmentsInSlot="1" />
                        </RadzenScheduler>
                    </RadzenTabsItem>

                </Tabs>
            </RadzenTabs>
        </div>
    </div>

}

@code {
    AppState AppState { get; set; } = new AppState();
    string msg { get; set; }
    string Today { get { return DateTime.Now.ToString("D", new CultureInfo("en-EN")); } }
    private bool IsRendered { get; set; } = false;
    private string AppVersion { get; set; }
    private static NLog.ILogger AppLogger = NLog.LogManager.GetCurrentClassLogger();

    RadzenScheduler<LessonModel> Scheduler;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    string NotificationPosition { get { return AppConfig.GetSection("PopUpNotifications").GetValue<string>("Position"); } }
    int NotificationDuration { get { return AppConfig.GetSection("PopUpNotifications").GetValue<int>("Duration"); } }

    private DateTime TimeScopeStart { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 0, 0, 0);
    private DateTime TimeScopeStop { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1, 0, 0, 0).AddMonths(2);

    private int TutorID { get; set; } = 0;
    private UserModel UserObject { get; set; } = new UserModel();
    private TutorModel TutorObject { get; set; } = new TutorModel();
    private LessonModel LessonObject { get; set; } = new LessonModel();
    private IEnumerable<GroupModel> GroupEnum { get; set; }
    private IEnumerable<WorkTypeModel> WorkTypeEnum { get; set; }
    private IEnumerable<LevelModel> LevelEnum { get; set; }
    private IEnumerable<SubjectModel> SubjectEnum { get; set; }
    private IEnumerable<CompetenceModel> CompetenceEnum { get; set; }
    private IEnumerable<LessonModel> LessonEnum { get; set; }
    private IEnumerable<LessonStatusModel> LessonStatusEnum { get; set; }
    private IEnumerable<AvailabilityModel> AvailabilityEnum { get; set; }
    private IEnumerable<AvailabilityModel> AvailabilityEnumFiltered { get; set; }
    private IEnumerable<LevelModel> LevelEnumFiltered { get; set; }
    private IEnumerable<RatingModel> RatingEnum { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        AppVersion = Assembly.GetExecutingAssembly().GetCustomAttribute<AssemblyInformationalVersionAttribute>().InformationalVersion;
        IsRendered = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await InitializeSession();

                IsRendered = true;

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private async Task InitializeSession()
    {
        try
        {
            if (await SessionStorage.ContainKeyAsync("APP_STATE"))
            {
                AppState = await SessionStorage.GetItemAsync<AppState>("APP_STATE");
                await InitializeData();
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private async Task InitializeData()
    {
        try
        {
            if (AppState.UserInfo.IsNotNull())
            {
                UserObject = await UserService.SelectAsync(AppState.UserInfo.USER_ID);
                TutorID = AppState.GetParamAsInteger("TUTOR_ID", 0);
                TutorObject = await TutorService.SelectAsync(TutorID);

                if (UserObject.IsNotNull() && TutorObject.IsNotNull())
                {
                    WorkTypeEnum = await WorkTypeService.SelectAllAsync();
                    LevelEnum = await LevelService.SelectAllAsync();
                    SubjectEnum = await SubjectService.SelectAllAsync();
                    LessonStatusEnum = await LessonStatusService.SelectAllAsync();
                    CompetenceEnum = await CompetenceService.SelectAllByTutorAsync(TutorID);
                    RatingEnum = await RatingService.SelectAllAsync();

                    LevelEnumFiltered = FilterLevelList(LessonObject.SUBJECT_ID, TutorID);
                    SubjectEnum = FilterSubjectList(TutorID);

                    LessonEnum = await LessonService.SelectAllByTutorAsync(TutorID);
                    AvailabilityEnum = await AvailabilityService.SelectAllAsync(TutorID, TimeScopeStart, TimeScopeStop);

                    AppState.SetParam("CALENDAR_OWNER_ID", TutorID);
                    AppState = await SessionStorage.GetItemAsync<AppState>("APP_STATE");
                }
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        AvailabilityEnumFiltered = AvailabilityEnum.Where(x => x.DATE_START >= args.View.StartDate && x.DATE_STOP < args.View.EndDate);

        if (args.View.Text == "Month")
        {

            // Highlight today in month view
            if (args.Start.Date == DateTime.Today)
            {
                args.Attributes["style"] = "background: rgba(255,115,0,255); opacity: 0.75;";
            }

            foreach (AvailabilityModel av in AvailabilityEnumFiltered)
            {
                if (args.Start.Date == av.DATE_START.Date)
                {
                    args.Attributes["style"] = "background: rgba(255,220,40,.2);";
                }
            }
        }

        if (args.View.Text == "Week")
        {
            foreach (AvailabilityModel av in AvailabilityEnumFiltered)
            {
                if (args.Start.Date == av.DATE_START.Date && args.Start.TimeOfDay >= av.DATE_START.TimeOfDay && args.Start.TimeOfDay < av.DATE_STOP.TimeOfDay)
                {
                    args.Attributes["style"] = "background: rgba(255,220,40,.2);";
                }
            }
        }

        if (args.View.Text == "Day")
        {
            foreach (AvailabilityModel av in AvailabilityEnumFiltered)
            {
                if (args.Start.Date == av.DATE_START.Date && args.Start.TimeOfDay >= av.DATE_START.TimeOfDay && args.Start.TimeOfDay < av.DATE_STOP.TimeOfDay)
                {
                    args.Attributes["style"] = "background: rgba(255,220,40,.2);";
                }
            }
        }
    }

    private async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        // when selected not-available slot
        if (AvailabilityEnum.Where(x => x.DATE_START <= args.Start && x.DATE_STOP >= args.End).Count().IsZero()) { return; }

        // when selected past slot
        if (args.Start < DateTime.Now)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Availability", Detail = "Only future lesson can be registered", Duration = NotificationDuration, Style = NotificationPosition });
            return;
        }

        var tutor = UserService.Select(TutorID);
        var student = UserService.Select(UserObject.USER_ID);
        var status = LessonStatusEnum.OrderBy(x => x.LESSON_STATUS_ID).FirstOrDefault();
        var rating = RatingEnum.OrderBy(x => x.RATING_ID).FirstOrDefault();
        var subject = SubjectEnum.OrderBy(x => x.SUBJECT_ID).FirstOrDefault();

        LevelEnumFiltered = FilterLevelList(subject.SUBJECT_ID, TutorID);

        var level = LevelEnumFiltered.OrderBy(x => x.LEVEL_ID).FirstOrDefault();

        if (tutor.IsNull() || student.IsNull() || status.IsNull() || rating.IsNull() || subject.IsNull() || level.IsNull()) { return; }

        LessonModel lesson = new LessonModel()
            {
                TUTOR_ID = tutor.USER_ID,
                TUTOR_NAME = tutor.USER_NICKNAME,
                STUDENT_ID = student.USER_ID,
                STUDENT_NAME = student.USER_NICKNAME,
                DATE_START = args.Start,
                DATE_STOP = args.End,
                RATING_ID = rating.RATING_ID,
                RATING_NAME = rating.RATING_NAME,
                RATING_VALUE = rating.RATING_VALUE,
                LESSON_STATUS_ID = status.LESSON_STATUS_ID,
                LESSON_STATUS_NAME = status.LESSON_STATUS_NAME,
                LESSON_STATUS_ICON = status.LESSON_STATUS_ICON,
                LESSON_STATUS_ICON_COLOR = status.LESSON_STATUS_ICON_COLOR,
                SUBJECT_ID = subject.SUBJECT_ID,
                SUBJECT_NAME = subject.SUBJECT_NAME,
                LEVEL_ID = level.LEVEL_ID,
                LEVEL_NAME = level.LEVEL_NAME
            };

        await DialogService.OpenAsync<LessonEditor>("Add New Lesson", new Dictionary<string, object> { { "LessonObject", lesson } });
        LessonEnum = await LessonService.SelectAllByTutorAsync(TutorID);
        await Scheduler.Reload();
    }

    private async Task OnLessonSelect(SchedulerAppointmentSelectEventArgs<LessonModel> args)
    {
        LessonObject = await LessonService.SelectAsync(args.Data.LESSON_ID);
        await DialogService.OpenAsync<LessonEditor>("Edit Appointment", new Dictionary<string, object> { { "LessonObject", LessonObject } });
        LessonEnum = await LessonService.SelectAllByTutorAsync(TutorID);
        await Scheduler.Reload();
    }

    private IEnumerable<LevelModel> FilterLevelList(int subjectID, int tutorID)
    {
        List<int> levelsOfTheSubject = CompetenceEnum.Where(x => x.TUTOR_ID == TutorID && x.SUBJECT_ID == subjectID).Select(y => y.LEVEL_ID).ToList();
        return LevelEnum.Where(x => levelsOfTheSubject.Contains(x.LEVEL_ID));
    }

    private IEnumerable<SubjectModel> FilterSubjectList(int tutorID)
    {
        List<int> tutorSubjects = CompetenceEnum.Where(x => x.TUTOR_ID == TutorID).Select(y => y.SUBJECT_ID).ToList();
        return SubjectEnum.Where(x => tutorSubjects.Contains(x.SUBJECT_ID));
    }

    private void ShowNotification(NotificationMessage message)
    {
        try
        {
            NotificationService.Notify(message);
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private void ShowTooltip(ElementReference elementReference, string msg)
    {
        TooltipOptions options = new TooltipOptions() { Duration = NotificationDuration };
        TooltipService.Open(elementReference, msg, options);
    }

    public void Dispose()
    {
    }
}

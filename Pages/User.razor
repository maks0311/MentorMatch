@page "/user"

@implements IDisposable

@using System
@using System.Text
@using System.Reflection
@using Dapper;
@using System.Data.SqlClient;
@using Radzen;
@using Radzen.Blazor;
@using Radzen.Blazor.Rendering;
@using Microsoft.Extensions.Configuration;
@using System.Globalization;
@using Microsoft.Extensions.Logging;
@using Microsoft.Extensions.Logging.EventLog;
@using Blazored.SessionStorage;
@using Mentor.Data;

@inject IConfiguration AppConfig
@inject ISessionStorageService SessionStorage
@inject IPermissionService PermissionService;

@inject TooltipService TooltipService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject DialogService DialogService

@inject IUserService UserService
@inject IGroupService GroupService
@inject IWorkTypeService WorkTypeService;
@inject ILevelService LevelService;
@inject ISubjectService SubjectService;
@inject ICompetenceService CompetenceService;
@inject ILessonService LessonService;

@if (AppState.IsNull())
{
    <p>Loading menu...</p>
}
else
{
    <TopMenu AppState="@AppState" IsRendered="@IsRendered"></TopMenu>

    @if ((AppState.UserInfo.IsNull()) || (AppState.UserInfo.IsAuthenticated.IsFalse()))
    {

    }
    else
    {
        <div class="row" style="margin-top:60px">
            <div class="col-md-12">
                <RadzenTabs RenderMode="TabRenderMode.Client" Style="height: max-content">
                    <Tabs>
                        <RadzenTabsItem Text="My Account">
                            <RadzenCard>
                                <RadzenButton Text="Save" Icon="save" Click="UserSave" Disabled="@DisableSave" Style="margin-right:5px" ButtonStyle="ButtonStyle.Secondary"></RadzenButton>
                                <RadzenButton Text="Remove" Icon="cancel" Disabled="true" ButtonStyle="ButtonStyle.Primary"></RadzenButton>
                            </RadzenCard>
                            <RadzenCard Style="margin-top:10px">
                                <RadzenStack Style="width:inherit" Orientation="Orientation.Horizontal">
                                    <RadzenStack Style="width:50%">
                                        <RadzenRow>
                                            <RadzenColumn Size="@ColumnLabelSize"><RadzenText Text="Fullname"></RadzenText></RadzenColumn>
                                            <RadzenColumn Size="@ColumnControlSize"><RadzenTextBox Style="width:inherit" @bind-Value=@UserObject.USER_FULLNAME MaxLength="50" Placeholder="" Change="@OnChange"></RadzenTextBox></RadzenColumn>
                                        </RadzenRow>
                                        <RadzenRow>
                                            <RadzenColumn Size="@ColumnLabelSize"><RadzenText Text="Nickname"></RadzenText></RadzenColumn>
                                            <RadzenColumn Size="@ColumnControlSize"><RadzenTextBox Style="width:inherit" @bind-Value=@UserObject.USER_NICKNAME MaxLength="50" Placeholder="" Change="@OnChange"></RadzenTextBox></RadzenColumn>
                                        </RadzenRow>
                                        <RadzenRow>
                                            <RadzenColumn Size="@ColumnLabelSize"><RadzenText Text="E-mail"></RadzenText></RadzenColumn>
                                            <RadzenColumn Size="@ColumnControlSize"><RadzenTextBox Style="width:inherit" @bind-Value=@UserObject.USER_EMAIL MaxLength="50" Placeholder="" Change="@OnChange"></RadzenTextBox></RadzenColumn>
                                        </RadzenRow>
                                        <RadzenRow>
                                            <RadzenColumn Size="@ColumnLabelSize"><RadzenText Text="Phone"></RadzenText></RadzenColumn>
                                            <RadzenColumn Size="@ColumnControlSize"><RadzenTextBox Style="width:inherit" @bind-Value=@UserObject.USER_PHONE MaxLength="50" Placeholder="" Change="@OnChange"></RadzenTextBox></RadzenColumn>
                                        </RadzenRow>
                                        <RadzenRow>
                                            <RadzenColumn Size="@ColumnLabelSize"><RadzenText Text="Active"></RadzenText></RadzenColumn>
                                            <RadzenColumn Size="@ColumnControlSize"><RadzenCheckBox Style="width:min-content" @bind-Value=@UserObject.IS_ACTIVE TValue="bool" TriState="false" Change=@(args => OnCheckBoxChange(args, "IS_ACTIVE")) /></RadzenColumn>
                                        </RadzenRow>
                                    </RadzenStack>
                                    <RadzenStack Style="width:50%">
                                        <RadzenRow>
                                            <RadzenColumn Size="@ColumnLabelSize"><RadzenText Text="Group"></RadzenText></RadzenColumn>
                                            <RadzenColumn Size="@ColumnControlSize">
                                                <RadzenDropDown @bind-Value=@UserObject.GROUP_ID
                                                        TextProperty="GROUP_NAME"
                                                        ValueProperty="GROUP_ID"
                                                        TValue="int"
                                                        AllowClear="false"
                                                        Style="width:min-content"
                                                        Data=@GroupEnum
                                                        Change=@(args => OnDropDownChange(args, "GROUP")) />
                                            </RadzenColumn>
                                        </RadzenRow>
                                        <RadzenRow>
                                            <RadzenColumn Size="@ColumnLabelSize"><RadzenText Text="Work Type"></RadzenText></RadzenColumn>
                                            <RadzenColumn Size="@ColumnControlSize">
                                                <RadzenDropDown @bind-Value=@UserObject.WORK_TYPE_ID
                                                        TextProperty="WORK_TYPE_NAME"
                                                        ValueProperty="WORK_TYPE_ID"
                                                        TValue="int"
                                                        AllowClear="false"
                                                        Style="width:min-content"
                                                        Data=@WorkTypeEnum
                                                        Change=@(args => OnDropDownChange(args, "WORK_TYPE")) />
                                            </RadzenColumn>
                                        </RadzenRow>
                                        <RadzenRow>
                                            <RadzenColumn Size="@ColumnLabelSize"><RadzenText Text="Description"></RadzenText></RadzenColumn>
                                            <RadzenColumn Size="@ColumnControlSize"><RadzenTextArea @bind-Value=@UserObject.USER_DESCRIPTION MaxLength="500" Rows="5" Style="width:inherit" Change="@OnChange"></RadzenTextArea></RadzenColumn>
                                        </RadzenRow>
                                    </RadzenStack>
                                </RadzenStack>
                            </RadzenCard>
                        </RadzenTabsItem>

                        <RadzenTabsItem Text="My Password">
                            <RadzenCard>
                                <RadzenButton Text="Save New Password" Icon="save" Click="PasswordSave" Disabled="@DisablePasswordSave" Style="margin-right:5px" ButtonStyle="ButtonStyle.Secondary"></RadzenButton>
                            </RadzenCard>
                            <RadzenCard Style="margin-top:10px">
                                <div class="col-md-3">
                                    <RadzenStack Orientation="Orientation.Vertical">
                                        <RadzenPassword @bind-Value="Pass1" AutoComplete="false" Text="Password" MaxLength="50" Placeholder="Enter Password" Change="OnPasswordChange"></RadzenPassword>
                                        <RadzenPassword @bind-Value="Pass2" AutoComplete="false" Text="Repeat Password" MaxLength="50" Placeholder="Repeat Password" Change="OnPasswordChange"></RadzenPassword>
                                    </RadzenStack>
                                </div>
                            </RadzenCard>
                        </RadzenTabsItem>

                        @if (UserObject.IsTutor)
                        {
                            <RadzenTabsItem Text="My Competence">
                                <RadzenCard>
                                    <RadzenButton Text="Add Competence" Icon="add" Click="AddCompetence" Disabled="@DisableAdd" Style="margin-right:5px" ButtonStyle="ButtonStyle.Secondary"></RadzenButton>
                                </RadzenCard>
                                <RadzenCard>
                                    <RadzenRow Style="margin-bottom: 10px">
                                        <RadzenColumn Size="2"><RadzenText Text="Level"></RadzenText></RadzenColumn>
                                        <RadzenColumn Size="2"><RadzenText Text="Subject"></RadzenText></RadzenColumn>
                                    </RadzenRow>
                                    <RadzenRow>
                                        <RadzenColumn Size="2">
                                            <RadzenDropDown @bind-Value=@CompetenceObject.LEVEL_ID
                                                TextProperty="LEVEL_NAME"
                                                ValueProperty="LEVEL_ID"
                                                TValue="int"
                                                AllowClear="false"
                                                Style="width:min-content"
                                                Data=@LevelEnum
                                                AllowFiltering="true"
                                                FilterAsYouType="true" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="2">
                                            <RadzenDropDown @bind-Value=@CompetenceObject.SUBJECT_ID
                                                TextProperty="SUBJECT_NAME"
                                                ValueProperty="SUBJECT_ID"
                                                TValue="int"
                                                AllowClear="false"
                                                Style="width:min-content"
                                                Data=@SubjectEnum
                                                AllowFiltering="true"
                                                FilterAsYouType="true" />
                                        </RadzenColumn>
                                    </RadzenRow>
                                </RadzenCard>
                                <RadzenCard>
                                    <RadzenDataGrid Data="@CompetenceEnum"
                                        AllowFiltering="false"
                                        AllowMultiColumnSorting="true"
                                        ClearFilterText="true"
                                        AllowColumnResize="true"
                                        FilterMode="FilterMode.Simple"
                                        AllowPaging="true"
                                        AllowSorting="true"
                                        AllowVirtualization="true"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        LogicalFilterOperator="LogicalFilterOperator.And"
                                        Visible="true">
                                        <Columns>
                                            <RadzenDataGridColumn TItem="CompetenceModel" Property="SUBJECT_NAME" Filterable="false" Title="Subject" Frozen="true" TextAlign="TextAlign.Left" />
                                            <RadzenDataGridColumn TItem="CompetenceModel" Property="LEVEL_NAME" Title="Education Level" Frozen="true" TextAlign="TextAlign.Left" />
                                            <RadzenDataGridColumn TItem="CompetenceModel" Property="ID" Title="Del" Frozen="true" Sortable="false" Filterable="false" Width="60px">
                                                <Template Context="CompetenceModel">
                                                    <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="clear" Click=@(() => DeleteCompetence(CompetenceModel.ID)) />
                                                </Template>
                                            </RadzenDataGridColumn>
                                        </Columns>
                                    </RadzenDataGrid>
                                </RadzenCard>
                            </RadzenTabsItem>
                        }

                        @if (UserObject.IsStudent || UserObject.IsTutor)
                        {
                            <RadzenTabsItem Text="My Lessons">
                                <RadzenCard>
                                    <RadzenDataGrid Data="@LessonEnum"
                                        AllowFiltering="false"
                                        AllowMultiColumnSorting="true"
                                        ClearFilterText="true"
                                        AllowColumnResize="true"
                                        FilterMode="FilterMode.Simple"
                                        AllowPaging="true"
                                        AllowSorting="true"
                                        AllowVirtualization="true"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        LogicalFilterOperator="LogicalFilterOperator.And"
                                        Visible="true">
                                        <Columns>
                                            <RadzenDataGridColumn TItem="LessonModel" Property="TUTOR_NAME" Filterable="false" Title="Tutor" Frozen="true" Visible="@UserObject.IsStudent" TextAlign="TextAlign.Center" />
                                            <RadzenDataGridColumn TItem="LessonModel" Property="STUDENT_NAME" Filterable="false" Title="Student" Frozen="true" Visible="@UserObject.IsTutor" TextAlign="TextAlign.Center" />
                                            <RadzenDataGridColumn TItem="LessonModel" Property="SUBJECT_NAME" Filterable="false" Title="Subject" Frozen="true" TextAlign="TextAlign.Center" />
                                            <RadzenDataGridColumn TItem="LessonModel" Property="DATE_START" Filterable="false" Title="Start Date" Frozen="true" TextAlign="TextAlign.Center" />
                                            <RadzenDataGridColumn TItem="LessonModel" Property="DATE_STOP" Filterable="false" Title="End Date" Frozen="true" TextAlign="TextAlign.Center" />
                                            <RadzenDataGridColumn TItem="LessonModel" Property="LESSON_STATUS_NAME" Filterable="false" Title="Status" Frozen="true" TextAlign="TextAlign.Center" Width="100px">
                                                <Template Context="LessonModel">
                                                    <RadzenIcon Icon="@LessonModel.LESSON_STATUS_ICON" MouseEnter="@(args => ShowTooltip(args, LessonModel.LESSON_STATUS_NAME))" class="@LessonModel.LESSON_STATUS_ICON_COLOR" />
                                                </Template>
                                            </RadzenDataGridColumn>
                                            <RadzenDataGridColumn TItem="LessonModel" Property="RATING_NAME" Filterable="false" Title="Rating" Frozen="true" TextAlign="TextAlign.Center">
                                                <Template Context="LessonModel">
                                                    <RadzenRating @bind-Value=@LessonModel.RATING_VALUE MouseEnter="@(args => ShowTooltip(args, LessonModel.RATING_NAME))" ReadOnly='true'></RadzenRating>
                                                </Template>
                                            </RadzenDataGridColumn>
                                            <RadzenDataGridColumn TItem="LessonModel" Property="LESSON_ID" Title="Details" Frozen="true" Sortable="false" Filterable="false" Width="60px">
                                                <Template Context="LessonModel">
                                                    <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="description" Click=@(() => OpenDetails(LessonModel.LESSON_ID)) />
                                                </Template>
                                            </RadzenDataGridColumn>
                                        </Columns>
                                    </RadzenDataGrid>
                                </RadzenCard>
                            </RadzenTabsItem>
                        }
                    </Tabs>
                </RadzenTabs>
            </div>
        </div>
    }
}


@code {
    AppState AppState { get; set; } = new AppState();
    string msg { get; set; }
    string Today { get { return DateTime.Now.ToString("D", new CultureInfo("en-EN")); } }
    private bool IsRendered { get; set; } = false;
    private string AppVersion { get; set; }
    private static NLog.ILogger AppLogger = NLog.LogManager.GetCurrentClassLogger();
    private String Pass1 { get; set; } = String.Empty;
    private String Pass2 { get; set; } = String.Empty;
    private bool DisableSave { get; set; } = true;
    private bool DisablePasswordSave { get; set; } = true;
    private bool DisableAdd
    {
        get
        {
            return !(LevelEnum.IsNotNull() && LevelEnum.Any() && SubjectEnum.IsNotNull() && SubjectEnum.Any());
        }
    }
    private int ColumnLabelSize = 2;
    private int ColumnControlSize = 10;
    private int UserRating = 0;

    string NotificationPosition { get { return AppConfig.GetSection("PopUpNotifications").GetValue<string>("Position"); } }
    int NotificationDuration { get { return AppConfig.GetSection("PopUpNotifications").GetValue<int>("Duration"); } }

    private UserModel UserObject { get; set; } = new UserModel();
    private CompetenceModel CompetenceObject { get; set; } = new CompetenceModel();
    private LessonModel LessonObject { get; set; } = new LessonModel();
    private IEnumerable<GroupModel> GroupEnum { get; set; }
    private IEnumerable<WorkTypeModel> WorkTypeEnum { get; set; }
    private IEnumerable<LevelModel> LevelEnum { get; set; }
    private IEnumerable<SubjectModel> SubjectEnum { get; set; }
    private IEnumerable<CompetenceModel> CompetenceEnum { get; set; }
    private IEnumerable<LessonModel> LessonEnum { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        AppVersion = Assembly.GetExecutingAssembly().GetCustomAttribute<AssemblyInformationalVersionAttribute>().InformationalVersion;
        IsRendered = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await InitializeSession();
                await InitializeData();

                IsRendered = true;

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private async Task InitializeSession()
    {
        try
        {
            if (await SessionStorage.ContainKeyAsync("APP_STATE"))
            {
                AppState = await SessionStorage.GetItemAsync<AppState>("APP_STATE");
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private async Task InitializeData()
    {
        try
        {
            if (AppState.UserInfo.IsNotNull())
            {
                UserObject = await UserService.SelectAsync(AppState.UserInfo.USER_ID);

                if (UserObject.IsAdmin)
                {
                    GroupEnum = await GroupService.SelectAllAsync();
                    GroupEnum = GroupEnum.Where(x => x.GROUP_ID == 1);
                }
                else
                {
                    GroupEnum = await GroupService.SelectAllAsync();
                    GroupEnum = GroupEnum.Where(x => x.GROUP_ID > 1);
                }

                WorkTypeEnum = await WorkTypeService.SelectAllAsync();
                LevelEnum = await LevelService.SelectAllAsync();
                SubjectEnum = await SubjectService.SelectAllAsync();
                CompetenceEnum = await CompetenceService.SelectAllByTutorAsync(UserObject.USER_ID);

                if (LevelEnum.IsNotNull() && LevelEnum.Any() && SubjectEnum.IsNotNull() && SubjectEnum.Any())
                {
                    CompetenceObject.TUTOR_ID = UserObject.USER_ID;
                    CompetenceObject.SUBJECT_ID = SubjectEnum.FirstOrDefault().SUBJECT_ID;
                    CompetenceObject.LEVEL_ID = LevelEnum.FirstOrDefault().LEVEL_ID;
                }

                if (UserObject.IsTutor)
                {
                    LessonEnum = await LessonService.SelectAllByTutorAsync(UserObject.USER_ID);
                }
                else if (UserObject.IsStudent)
                {
                    LessonEnum = await LessonService.SelectAllByStudentAsync(UserObject.USER_ID);
                }
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }
    private async Task UserSave()
    {
        try
        {
            if (UserObject.IsNotNull() && UserObject.IsAuthenticated)
            {
                var retval = await UserService.UpdateAsync(UserObject);

                if (retval == 1)
                {
                    AppState.UserInfo = UserObject;
                    await SessionStorage.SetItemAsync<AppState>("APP_STATE", AppState);

                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "User", Detail = "Saved", Duration = NotificationDuration, Style = NotificationPosition });
                    DisableSave = true;
                }
                else
                {
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "User", Detail = "Not Saved", Duration = NotificationDuration, Style = NotificationPosition });
                }
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private void OnChange()
    {
        DisableSave = false;
    }

    private void OnCheckBoxChange(bool? value, string name)
    {
        DisableSave = false;
    }

    private void OnDropDownChange(object value, string key)
    {
        DisableSave = false;
    }

    private void OnPasswordChange()
    {
        bool pass_error = false;
        string msg = string.Empty;

        if (String.IsNullOrEmpty(Pass1) || String.IsNullOrEmpty(Pass2))
        {
            pass_error = true;
        }

        if (Pass1.Length < 6 && pass_error.IsFalse())
        {
            pass_error = true;
            msg = "Password too short, should contain at least 6 characters.";
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Password", Detail = msg, Duration = NotificationDuration, Style = NotificationPosition });
        }

        if (!Pass1.Equals(Pass2, StringComparison.InvariantCulture) && pass_error.IsFalse())
        {
            pass_error = true;
            msg = "Password and its repetition are not identical, enter them again please.";
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Password", Detail = msg, Duration = NotificationDuration, Style = NotificationPosition });
        }

        DisablePasswordSave = pass_error;
    }

    private async Task PasswordSave()
    {
        int retval = await UserService.PasswordUpdateAsync(UserObject.USER_ID, Encryption.EnryptString(Pass1));

        if (retval.IsPositive())
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Password", Detail = "Password saved correctly", Duration = NotificationDuration, Style = NotificationPosition });
            DisablePasswordSave = true;
        }
        else
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Password", Detail = "Password not saved", Duration = NotificationDuration, Style = NotificationPosition });
        }
    }

    private async Task AddCompetence()
    {
        try
        {
            if (UserObject.IsNotNull() && UserObject.IsAuthenticated && CompetenceObject.IsNotNull())
            {
                var retval = await CompetenceService.CreateAsync(CompetenceObject);
                if (retval.IsPositive())
                {
                    CompetenceEnum = await CompetenceService.SelectAllByTutorAsync(UserObject.USER_ID);
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Competence", Detail = "New competence added", Duration = NotificationDuration, Style = NotificationPosition });
                }
                else if (retval.IsZero())
                {
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Competence", Detail = "This competence already exists", Duration = NotificationDuration, Style = NotificationPosition });
                }
                else
                {
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Competence", Detail = "Competence not added", Duration = NotificationDuration, Style = NotificationPosition });
                }
            }
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private async void OpenDetails(int lessonID)
    {
        AppState.LessonInfo = await LessonService.SelectAsync(lessonID);
        await SessionStorage.SetItemAsync<AppState>("APP_STATE", AppState);
        NavigationManager.NavigateTo("/lesson");
    }

    private async Task DeleteCompetence(int id)
    {
        if (id > 0)
        {
            var retVal = CompetenceService.Delete(id);
            if (retVal.IsPositive())
            {
                CompetenceEnum = await CompetenceService.SelectAllByTutorAsync(UserObject.USER_ID);
            }
        }
    }

    private void ShowNotification(NotificationMessage message)
    {
        try
        {
            NotificationService.Notify(message);
        }
        catch (Exception ex)
        {
            AppLogger.Error("{0} {1}", MethodBase.GetCurrentMethod().Name, ex.Message);
        }
    }

    private void ShowTooltip(ElementReference elementReference, string msg)
    {
        TooltipOptions options = new TooltipOptions() { Duration = NotificationDuration };
        TooltipService.Open(elementReference, msg, options);
    }

    public void Dispose()
    {
    }
}
